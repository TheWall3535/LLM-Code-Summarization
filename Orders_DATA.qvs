///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;($#,##0.00)f';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

set hideprefix='^';


EXECUTE G:\01.Repository\15.GOOGLE\EXTRACTOR\gDocXTractor.exe -file 'Prerevenue_FileLoop';

EXECUTE G:\01.Repository\15.GOOGLE\EXTRACTOR\gDocXTractor.exe -file 'Blocks Used On Web Orders';

EXECUTE G:\01.Repository\15.GOOGLE\EXTRACTOR\gDocXTractor.exe -file 'Blocks Used On EDI Orders';


///$tab Fact
Sort_Order:
LOAD * INLINE [
    TransactionType
    Orders
    Credits&Returns
	Inquiry
	Quotes
	Rebates
];


Fact:
LOAD %KEY_VBAP, 
	  %KEY_VBAP as %DateID,
	 [Sales Document],
     [Sales Document Type], 
     [Sales document_VBELN], 
     Description, 
     [Billing Block1], 
     [Billing Block2], 
     %KEY_CONTACT_BILL_TO, 
     %KEY_PO_TYPE, 
     [PO Number], 
     %KEY_CONTACT_SOLD_TO, 
     [Special Pricing Code_IHREZ_E], 
     [Created By], 
     [Shipping Strategy], 
     [Delivery Block], 
     %KEY_DIVISION, 
     [Document currency_WAERK], 
     [Header Local Date], 
     %KEY_VBAK, 
     %KEY_CARRIER, 
     [Created By Header], 
     [Header System Date], 
     [Inco Terms 1], 
     [Inco Terms 2], 
     [SD Item Category], 
     [Key Code_VSNMR_V], 
     [Delivery Block Status], 
     [Overall Delivery Block Status], 
     [Material Entered], 
     %KEY_MATERIAL, 
     Doc_Curr_Net_Value, 
     %KEY_ORDER_REASON, 
     %KEY_PAYER, 
     Plant.Number, 
     [Prec Doc Cat Line], 
     [Prec Doc Cat Header], 
     %KEY_REJECTION_REASON, 
     [Reference Document], 
     [Reference Document Item], 
     %KEY_CONTACT_REQ, 
     [Sales Document Item], 
     [Sales Deal], 
     SalesOrg.Number, 
     [Shipping Point], 
     %KEY_SHIP_TO, 
     %KEY_CONTACT_SHIP_TO, 
     [Sales Team_ZZ_IN_SALES_TEAM], 
     [Sales Team_ZZSALESTEAM1], 
     %KEY_SOLD_TO, 
     Doc_Curr_Discount_Amount, 
     Doc_Curr_Product_Amount, 
     Doc_Curr_Freight_Amount, 
     Doc_Curr_Tax_Amount, 
     [Underdel. tolerance_UNTTO], 
     Doc_Curr_Crosssell_Amount, 
     %KEY_DISTRIBUTOR, 
     %KEY_DATE, 
     Website, 
     %KEY_CONTACT, 
     [Person Responsible], 
     [Department Responsible Code], 
     [Payment Card Type], 
     [Delivery status Code], 
      
     [Customer Material], 
     [Line Changed On Date], 
     [Quotation valid from_ANGDT], 
     [Quotation valid to_BNDDT], 
     [Delivery Block Header], 
     %KEY_LFA1, 
     TransactionType,
     TransactionType as Flag,
     Sign, 
     Flag_OrdersType, 
     %KEY_SALES_TEAM_IN, 
     %KEY_SALES_TEAM_IN as [Inside Sales Team],
     %KEY_SALES_TEAM, 
     %KEY_CURRNECY_BUDGET_CONVERSION, 
     OnCreditReview, 
     [Overall Credit Status Desc], 
     [Delivery status Code Desc], 
     [Department Responsible Code Desc], 
     [Overall Credit Status], 
     Rejected, 
     QuoteRejected, 
     [End User #], 
	 %KEY_ZE_END_USER_INDUSTRY,
     SoldTo.IndustryCode_Key, 
     ShipTo.IndustryCode_Key, 
     [Net Value], 
     [Discount Amount], 
     [Product Amount], 
     [Freight Amount], 
     [Tax Amount], 
     [Order Net Value], 
     Quote_Net_Value, 
     [Return Net Value], 
     [Rebate Net Value], 
     [Order Qty], 
     [Unit Net Value], 
     [tolerance Order Qty], 
     %KEY_PAYER_SALES_AREA, 
     %KEY_SHIP_TO_SALES_AREA, 
     %KEY_SOLD_TO_SALES_AREA,  
     %KEY_MANAGE_GROUP, 
     %KEY_PAYER_MANAGE_GROUP, 
     [PAYMENT CARD], 
     Doc_Curr_ZI_Amount, 
     DropShip, 
     %KEY_CATALOG, 
     %KEY_CATALOG_MATENT, 
     %KEY_MARC, 
     %KEY_SOLD_TO_CUSTOMER_DNA, 
     %KEY_SHIP_TO_CUSTOMER_DNA, 
     ^Active_Rejected_Flag, 
     %KEY_SALESTEAM_OUT,
	 %KEY_PAYER_ZSCUSR,
     %KEY_SOLDTO_ZSCUSR,
	 
	 [ZI Cost Center],
     Name_BNAME,

	 [GA Transaction Flag],
	 GATransactionID,
	 %KEY_ZSCUSR02_SOLDTO_SURVIVOR,
	 %KEY_PAYER_ZSCUSR_SURVIVOR,
	 [Line Item Reason #] ,
	 [OCR Batch ID],
	 [Software Key Exp Date],
	 [Your Reference_IHREZ],
	 [Ship-to PO Number_BSTKD_E],
	 [Purchase Order Date],
	 [Lead From]
FROM
//[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Fact.qvd]
[G:\01.Repository\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Fact.qvd]
(qvd);


left join(Fact)
LOAD 
     %KEY_VBAP, 
     Carrier.Name, 
     DistributionChannel.Number_Desc,
     DistributionChannel.Number, 
     [Sales Type], 
     Division.Name, 
     SalesOrg.Number_Desc, 
     [MRP Controller], 
     [MRP Controller Desc], 
     Distributor.Name, 
     Plant.Number_Name, 
     SoldTo.IndustryCode, 
     Payer.IndustryCode, 
     ShipTo.IndustryCode, 
     [Sales Team In CurrAssign], 
     %KEY_ZSDSLST, 
     [Billing Block1 Desc], 
     [Billing Block2 Desc], 
     [Delivery Block Desc], 
     [Rejection Reason Description], 
     [Cross-Sell Type Desc], 
     [SD Item Category Desc], 
     Coupon_Text, 
     [Order Reason Description], 
     [Shipping Strategy Desc], 
     [PO Type Description], 
     [Sales Doc Type Description], 
     [Product Discount Grp_KONDM]
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Order_Attributes1.qvd]
(qvd);

left join(Fact)
LOAD %KEY_ACTIVE_MATERIAL, 
     %KEY_PROFIT_CENTER, 
     %KEY_VBAP, 
     Active_Payer, 
     ListPricePerUnit, 
 
     PricePer, 
     PriceUnit, 

     Flag_BP, 


     MASTER_PAYER, 
     %KEY_MASTER_PAYER_SALES_AREA, 
     %KEY_CATALOG_DESC, 
     %KEY_MATERIAL_ENT_DESC, 
     %KEY_CATALOG_NUM, 
     [Catalog.Catalog Number],
     %KEY_ENTITY, 
     Doc_Curr_Order_Amount, 
     Doc_Curr_ListPriceAmount, 
     Doc_Curr_ListPricePerUnit, 
     %KEY_PAYER_BUYING_GROUP, 
     %KEY_ACTIVEPAYER_BUYING_GROUP, 
     %KEY_ACTIVEMASTERPAYER_BUYING_GROUP, 
     %KEY_GPM, 
     %KEY_DATA_SET, 
     %KEY_FACT, 
     [Overall Item Status], 
     %KEY_SALESTEAM_OUT_SURVIVOR, 
     %KEY_ACTIVEPAYER_MANAGE_GROUP, 
     %KEY_ACTIVEMASTERPAYER_MANAGE_GROUP, 
	 %KEY_ACTIVE_PAYER_ZSCUSR,
     %KEY_ACTIVE_MASTER_PAYER_ZSCUSR,
     Active_Master_Payer, 
     ProfitCenter.Number_Name, 
     %KEY_ACTIVE_MATERIAL_PRODUCT_HIERARCHY,
     %KEY_MARC_ACTIVE,
     %KEY_PRODUCT_HIERARCHY,
     Company.Number,
	 [WPS Channel],
	 %KEY_ENTITY&'/'& %KEY_DATA_SET as  %PREREVENUE
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Order_Attributes2.qvd]
(qvd);

left join(Fact)
LOAD %KEY_VBAP, 
     OpenOrdersQty, 
     [Price Assurance], 
     [Delivery Date_EDATU], 
     Doc_Curr_OpenOrder_Net_Value,
     Delivery_Block_Item
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\OpenOrderQty.qvd]
//[G:\01.Repository\30.LOGICAL_LAYER\01.FACTS\Prerevenue\OpenOrderQty.qvd]
(qvd);

///$tab New Fact
Concatenate(Fact)
LOAD %KEY_FACT, 
     [Sales Document], 
     %KEY_MATERIAL, 
     [Sales Document Item], 
     [Reference Document], 
     [Reference Document Item], 
     [Material Entered], 
     %KEY_PRODUCT_HIERARCHY, 
     %KEY_ACTIVE_MATERIAL_PRODUCT_HIERARCHY, 
     %KEY_DATA_SET, 
     Flag_BP, 
     %KEY_ACTIVE_MATERIAL, 
     %KEY_CATALOG, 
     %KEY_SOLD_TO, 
     %KEY_PAYER, 
     MASTER_PAYER, 
     %KEY_SHIP_TO, 
     %KEY_CONTACT_SHIP_TO, 
     %KEY_CONTACT_SOLD_TO, 
     %KEY_CONTACT_BILL_TO, 
     %KEY_CONTACT_REQ, 
     %KEY_PAYER_BUYING_GROUP, 
     %KEY_LFA1, 
     Active_Payer, 
     Active_Master_Payer, 
     %KEY_GPM, 
     %KEY_CATALOG_DESC, 
     [Cross-Sell Type Desc], 
     [SD Item Category Desc], 
     [Delivery Block Desc], 
     [Shipping Strategy Desc], 
     [Billing Block1 Desc], 
     [Billing Block2 Desc], 
     [Delivery Block Status], 
     [Product Discount Grp_KONDM], 
     [MRP Controller Desc], 
     [Price Assurance], 
     %KEY_PROFIT_CENTER, 
     %KEY_VBAP, 
     %DateID, 
     Carrier.Name, 
     %KEY_CURRNECY_BUDGET_CONVERSION, 
     Company.Number, 
     SalesOrg.Number, 
     %KEY_DIVISION, 
     [Sales Document Type], 
     %KEY_REJECTION_REASON, 
     Plant.Number, 
     Description, 
     [Net Value], 
     [Discount Amount], 
     [Product Amount], 
     [Freight Amount], 
     [Tax Amount], 
     [Order Qty], 
     %KEY_DATE, 
     [Created By], 
     [Billing Block1], 
     [Sales Deal], 
     [Inside Sales Team], 
     %KEY_SALES_TEAM, 
     [Prec Doc Cat Line], 
     [Shipping Point], 
     Plant.Number_Name, 
     DistributionChannel.Number, 
     %KEY_PO_TYPE, 
     %KEY_ORDER_REASON, 
     %KEY_VBAK, 
     [Header System Date], 
     [Header Local Date], 
     %KEY_CONTACT, 
     Website, 
     [Delivery Block], 
     [Billing Block2], 
     [Prec Doc Cat Header], 
     [Shipping Strategy], 
     [Order Reason Description], 
     [Rejection Reason Description], 
     [PO Type Description], 
     [Sales Doc Type Description], 
     DistributionChannel.Number_Desc, 
     [Sales Type], 
     Flag, 
     TransactionType, 
     Sign, 
     Division.Name, 
     [Overall Credit Status], 
     [Overall Delivery Block Status], 
     SalesOrg.Number_Desc, 
     [Inco Terms 1], 
     [Inco Terms 2], 
     [PO Number], 
     OnCreditReview, 
     Rejected, 
     QuoteRejected, 
     %KEY_DISTRIBUTOR, 
     Distributor.Name, 
     %KEY_CARRIER, 
     %KEY_CATALOG_MATENT, 
     %KEY_ENTITY, 
     Doc_Curr_Net_Value, 
     Doc_Curr_Discount_Amount, 
     Doc_Curr_Product_Amount, 
     Doc_Curr_Freight_Amount, 
     Doc_Curr_Tax_Amount, 
     Doc_Curr_Crosssell_Amount, 
     [Order Net Value], 
     Quote_Net_Value, 
     [Return Net Value], 
     [Rebate Net Value], 
     Doc_Curr_ListPriceAmount, 
     Doc_Curr_ListPricePerUnit, 
     PricePer, 
     ListPricePerUnit, 
     PriceUnit, 
     ProfitCenter.Number_Name, 
     [PAYMENT CARD], 
     [MRP Controller], 
     %KEY_PAYER_SALES_AREA, 
     %KEY_SHIP_TO_SALES_AREA, 
     %KEY_SOLD_TO_SALES_AREA, 
     %KEY_MASTER_PAYER_SALES_AREA, 
     Delivery_Block_Item, 
     [Sales Team In CurrAssign], 
     [Special Pricing Code_IHREZ_E], 
     [Key Code_VSNMR_V], 
     Coupon_Text, 
     %KEY_ZSDSLST, 
     [Catalog.Catalog Number], 
     %KEY_SALES_TEAM_IN, 
     OpenOrdersQty, 
     Doc_Curr_OpenOrder_Net_Value, 
     [Delivery Date_EDATU], 
     [Person Responsible], 
     [Overall Item Status], 
     [Department Responsible Code], 
     [Payment Card Type], 
     [Delivery status Code], 
     [End User #], 
	 %KEY_ZE_END_USER_INDUSTRY,
     [Customer Material], 
     Doc_Curr_Order_Amount, 
     [Line Changed On Date], 
     Flag_OrdersType, 
     ^Active_Rejected_Flag, 
     [ZI Cost Center], 
     Doc_Curr_ZI_Amount, 
     [Delivery Block Header], 
     %KEY_SOLD_TO_CUSTOMER_DNA, 
     %KEY_SHIP_TO_CUSTOMER_DNA, 
     [Quotation valid from_ANGDT], 
     [Quotation valid to_BNDDT], 
     %KEY_SALESTEAM_OUT, 
     %KEY_SALESTEAM_OUT_SURVIVOR, 
     %KEY_ACTIVEPAYER_BUYING_GROUP, 
     %KEY_ACTIVEMASTERPAYER_BUYING_GROUP, 
     %KEY_ACTIVEPAYER_MANAGE_GROUP, 
     %KEY_ACTIVEMASTERPAYER_MANAGE_GROUP,
     Name_BNAME,
	 %KEY_ACTIVE_PAYER_ZSCUSR,
    %KEY_ACTIVE_MASTER_PAYER_ZSCUSR,
    %KEY_PAYER_ZSCUSR,
    %KEY_SOLDTO_ZSCUSR,
	[GA Transaction Flag],
	GATransactionID,

	[WPS Channel],
	%KEY_ZSCUSR02_SOLDTO_SURVIVOR,
	%KEY_PAYER_ZSCUSR_SURVIVOR,
	[Line Item Reason #],
	[OCR Batch ID],
	[Software Key Exp Date],
	[Your Reference_IHREZ],
	[Ship-to PO Number_BSTKD_E],
	[Purchase Order Date],
	%KEY_ENTITY&'/'& %KEY_DATA_SET as  %PREREVENUE,
	[Lead From]
FROM
//[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Order_BP.qvd]
[G:\01.Repository\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Order_BP.qvd]
(qvd);


drop table Sort_Order;

///$tab Condition Type
left Keep(Fact)
Salesdoc_Pricing_Details:
Load distinct
	%KEY_SALES_LINE as %KEY_VBAP,
	Salesdoc.ConditionType  as [Condition type_KSCHL], 
	Salesdoc.ConditionValue as [Condition value_KWERT],
	[Condition Type Name]

from 
//[G:\01.Repository\30.LOGICAL_LAYER\03.DIMENSIONS\SALESDOC_PRICING_DETAILS\DATA\Salesdoc_Pricing_Details.qvd] (qvd)
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALESDOC_PRICING_DETAILS\DATA\Salesdoc_Pricing_Details.qvd] (qvd)
;

left Keep(Fact)
PDC_Salesdoc_Pricing_Details:
Load distinct
	%KEY_SALES_LINE as %KEY_VBAP,
	Salesdoc.ConditionType  as [Condition type_KSCHL], 
	Salesdoc.ConditionValue as [Condition value_KWERT],
	[Condition Type Name]

from 
//[G:\01.Repository\30.LOGICAL_LAYER\03.DIMENSIONS\SALESDOC_PRICING_DETAILS\DATA\PDC_Salesdoc_Pricing_Details.qvd] (qvd)
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALESDOC_PRICING_DETAILS\DATA\PDC_Salesdoc_Pricing_Details.qvd] (qvd)
Where Not Match(Salesdoc.ConditionType,'EDI1'); //Same is present in Salesdoc_Princing_Details file

Concatenate(Salesdoc_Pricing_Details)
Load Distinct
	 *
Resident PDC_Salesdoc_Pricing_Details;
drop Table PDC_Salesdoc_Pricing_Details;
 
///$tab Web Block
[Temp_Delivery_Block_Header_Block_Seq]: 
LOAD
     %KEY_VBAK,  
     Seq_ZSEQ , 
     [Delivery block_LIFSK],
	 Description_VTEXT 
FROM
\\etl.ebi.insidebrady.com\repository$\04.TRANSACTION\SALES_ORDERS\DATA\SEGMENTS\ZSDFPNDBK_FY_*.qvd
(qvd) ;//where Exists(%KEY_VBAK);

[Delivery_Block_Header_Block_Seq]: 
NoConcatenate
load
%KEY_VBAK,
Seq_ZSEQ as [Delivery Block Header - Block Seq], 
[Delivery block_LIFSK] as Temp_Block,
[Delivery block_LIFSK] as Temp_Block_EDI,
[Delivery block_LIFSK] &'-'& Description_VTEXT as [Delivery Block Header - Block Seq Desc]
resident Temp_Delivery_Block_Header_Block_Seq;

drop table Temp_Delivery_Block_Header_Block_Seq;


//Added to get purchase order type
tAtt1:
 LOAD 
     %KEY_VBAP, 
     [PO Type Description] as [PO Type Description Seq]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\01.FACTS\Prerevenue\Order_Attributes1.qvd
(qvd);// where match ([PO Type Description],'ECOM-E-Commerce','EML-E-Mail');

left join ([Delivery_Block_Header_Block_Seq])
Load 
SubField(%KEY_VBAP,'/',1) as %KEY_VBAK,
[PO Type Description Seq]
Resident tAtt1
where match ([PO Type Description Seq],'ECOM-E-Commerce','EDI-EDI');
Drop Table tAtt1 ;


left join ([Delivery_Block_Header_Block_Seq])
LOAD [S:NO]  as [S:NO], 
	'Web' as Flag_Order_Type,
     [Delivery Block] as Temp_Block
FROM
[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Global IT\Global IT - Services\Omni Channel Customer Service\Enterprise Web Services\Blocks Used On Web Orders.xlsx]
(ooxml, embedded labels, table is Sheet1);

left join ([Delivery_Block_Header_Block_Seq])
LOAD [S:NO]  as [S:NO_EDI], 
	'EDI' as Flag_Order_Type_EDI,
     [Delivery Block] as Temp_Block_EDI
FROM
[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Global IT\Global IT - Services\Omni Channel Customer Service\Enterprise Web Services\Blocks Used On EDI Orders.xlsx]
(ooxml, embedded labels, table is Sheet1);


left join ([Delivery_Block_Header_Block_Seq])
load
%KEY_VBAK,

min([Delivery Block Header - Block Seq]) as [Delivery Block Header - Block Seq],
'X' as First_Web_Block_TEMP //Remove _TEMP after temp fix
Resident 
[Delivery_Block_Header_Block_Seq] 

//where Flag_Order_Type = 'Web'
where [PO Type Description Seq]='ECOM-E-Commerce'
Group by
%KEY_VBAK;

left join ([Delivery_Block_Header_Block_Seq])
load
%KEY_VBAK,

min([Delivery Block Header - Block Seq]) as [Delivery Block Header - Block Seq],
'X' as First_Web_Block_TEMP_EDI //Remove _TEMP after temp fix
Resident 
[Delivery_Block_Header_Block_Seq] 

//where Flag_Order_Type_EDI = 'EDI'
where [PO Type Description Seq]='EDI-EDI'
Group by
%KEY_VBAK;




//Temp Code

left join ([Delivery_Block_Header_Block_Seq])
load Distinct
%KEY_VBAK,
min([S:NO]) as [MIN_S:NO]
Resident [Delivery_Block_Header_Block_Seq]
where First_Web_Block_TEMP = 'X'
Group by
%KEY_VBAK;


left join ([Delivery_Block_Header_Block_Seq])
load Distinct
%KEY_VBAK,
min([S:NO_EDI]) as [MIN_S:NO_EDI]
Resident [Delivery_Block_Header_Block_Seq]
where First_Web_Block_TEMP_EDI = 'X'
Group by
%KEY_VBAK;

left join ([Delivery_Block_Header_Block_Seq])
load Distinct
%KEY_VBAK,
Temp_Block,
if([S:NO] = [MIN_S:NO],First_Web_Block_TEMP) as First_Web_Block
Resident [Delivery_Block_Header_Block_Seq]
;


left join ([Delivery_Block_Header_Block_Seq])
load Distinct
%KEY_VBAK,
Temp_Block_EDI,
if([S:NO_EDI] = [MIN_S:NO_EDI],First_Web_Block_TEMP_EDI) as First_EDI_Block
Resident [Delivery_Block_Header_Block_Seq]
;





drop Fields Flag_Order_Type, Temp_Block,[MIN_S:NO],[S:NO],First_Web_Block_TEMP,
Flag_Order_Type_EDI, Temp_Block_EDI,[MIN_S:NO_EDI],[S:NO_EDI],First_Web_Block_TEMP_EDI,[PO Type Description Seq];


//Hardcoded for Covid-19
LineItemReasonDesc:
LOAD * INLINE [
Line Item Reason #, Line Item Reason Desc
001,COVID-19
];
//END OF TEMP CODE
 


///$tab Contact
/*    %KEY_CONTACT_SHIP_TO, 
     %KEY_CONTACT_SOLD_TO, 
     %KEY_CONTACT_BILL_TO, 
     %KEY_CONTACT_REQ, 
*/

QUALIFY *;
UNQUALIFY  %KEY_CONTACT_SHIP_TO, 
     %KEY_CONTACT_SOLD_TO, 
     %KEY_CONTACT_BILL_TO, 
     %KEY_CONTACT_REQ;
     
SHIP_TO:
left keep (Fact)
LOAD Contact.PersonNumber, 
     %KEY_CONTACT as %KEY_CONTACT_SHIP_TO, 
     Contact.Number, 
     Contact.FirstName, 
     Contact.LastName, 
     Contact.Title, 
     Contact.Phone, 
     Contact.Email_One, 
     Contact.Email_Two,
	 SURVIVOR.Contact.PersonNumber, 
     SURVIVOR.Contact.Number, 
     SURVIVOR.Contact.FirstName, 
     SURVIVOR.Contact.LastName, 
     SURVIVOR.Contact.Title, 
     SURVIVOR.Contact.Phone, 
     SURVIVOR.Contact.Email_One, 
     SURVIVOR.Contact.Email_Two
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
(qvd);


SOLD_TO:
left keep (Fact)
LOAD Contact.PersonNumber, 
     %KEY_CONTACT as %KEY_CONTACT_SOLD_TO, 
     Contact.Number, 
     Contact.FirstName, 
     Contact.LastName, 
     Contact.Title, 
     Contact.Phone, 
     Contact.Email_One, 
     Contact.Email_Two,
	 SURVIVOR.Contact.PersonNumber, 
     SURVIVOR.Contact.Number, 
     SURVIVOR.Contact.FirstName, 
     SURVIVOR.Contact.LastName, 
     SURVIVOR.Contact.Title, 
     SURVIVOR.Contact.Phone, 
     SURVIVOR.Contact.Email_One, 
     SURVIVOR.Contact.Email_Two
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
(qvd);

BILL_TO:
left keep (Fact)
LOAD Contact.PersonNumber, 
     %KEY_CONTACT as %KEY_CONTACT_BILL_TO, 
     Contact.Number, 
     Contact.FirstName, 
     Contact.LastName, 
     Contact.Title, 
     Contact.Phone, 
     Contact.Email_One, 
     Contact.Email_Two
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
(qvd);

REQ:
left keep (Fact)
LOAD Contact.PersonNumber, 
     %KEY_CONTACT as %KEY_CONTACT_REQ, 
     Contact.Number, 
     Contact.FirstName, 
     Contact.LastName, 
     Contact.Title, 
     Contact.Phone, 
     Contact.Email_One, 
     Contact.Email_Two
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
(qvd);


UNQUALIFY*;
///$tab Customer DNA

SOLD_TO_CUSTOMER_DNA:
LOAD 
     %KEY_SOLD_TO_CUSTOMER_DNA,
     CustomerTag as [SoldTo Contact Survivor Customer Tag]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CUSTOMER_DNA\DATA\SOLD_TO_CUSTOMER_DNA.qvd
(qvd) where Exists(%KEY_SOLD_TO_CUSTOMER_DNA);

SHIP_TO_CUSTOMER_DNA:
LOAD 
 %KEY_SHIP_TO_CUSTOMER_DNA,
 CustomerTag  as [ShipTo Contact Survivor Customer Tag]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CUSTOMER_DNA\DATA\SHIP_TO_CUSTOMER_DNA.qvd
(qvd) where Exists(%KEY_SHIP_TO_CUSTOMER_DNA);


Left Keep(Fact)
SalesTeamOut:
LOAD 
     %KEY_SALESTEAM_OUT,  
     [Sales Team (Out)# Curr SoldTo],
     [Sales Team (Out) Curr SoldTo]
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_TEAM\DATA\SalesTeamOut.qvd]
(qvd);

Left Keep(Fact)
SalesTeamOut_Survivor:
LOAD 
     %KEY_SALESTEAM_OUT as  %KEY_SALESTEAM_OUT_SURVIVOR,  
     [Sales Team (Out)# Curr SoldTo] as [Sales Team (Out)# Curr SoldTo Survivor],
     [Sales Team (Out) Curr SoldTo] as [Sales Team (Out) Curr SoldTo Survivor]
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_TEAM\DATA\SalesTeamOut.qvd]
(qvd);



///$tab Main 30
LOAD %KEY_LFA1,
     Name_NAME1 as [Fwd Agent Name]
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\VENDOR\DATA\LFA1.qvd
(qvd)where exists(%KEY_LFA1);


For i = 0 to $(vNumYears)                
	Let vYear = year(addmonths(today(), 5));
	Let vYear = vYear - i;
	
ZSVC_VBAP:
LOAD %KEY_CAWNT, 
     [Internal char no._ATINN], 
     %KEY_VBAP,
     %KEY_CAWNT_DESC,
//     ActiveFlag, 
     ATINN, 
//     ATVIE, 
     ATWRT 
//     BatchDt, 
//     CABN_ADZHL, 
//     CAWN_ADZHL, 
//     CAWN_ATZHL, 
//     CRITM, 
//     CUOBJ, 
//     POSNR, 
//     VBELN
FROM
[\\etl.ebi.insidebrady.com\repository$\03.MASTER\MATERIAL\DATA\SEGMENTS\ZSVC_VBAP_FY_$(vYear).qvd]
(qvd)Where Exists(%KEY_VBAP);

NEXT
LOAD [Internal char no._ATINN], 

     [Char. description_ATBEZ] as CABNT_DESC
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MATERIAL\DATA\CABNT.qvd]
(qvd) Where Exists(  [Internal char no._ATINN]);

// Need to be done in DB to take care child updates
left Join (ZSVC_VBAP)
LOAD %KEY_CAWNT, 
    
     [Value description_ATWTB] as CAWNT_DESC1
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MATERIAL\DATA\CAWNT.qvd]
(qvd) Where Exists(%KEY_CAWNT);

CAWNT:
load Distinct
%KEY_CAWNT_DESC,
if(len(trim(CAWNT_DESC1))>0 , CAWNT_DESC1, trim(ATINN)&'/'& trim(ATWRT) ) as CAWNT_DESC
Resident 
ZSVC_VBAP;
///$tab Managed Group
Manage_Group:
LOAD 
	 %KEY_MANAGE_GROUP, 
     [ManagedGroupSoldTo.Managed Group No ], 
     [ManagedGroupSoldTo.Managed Group Description],
     [ManagedGroupSoldTo.Managed Group No ]  & '-' & [ManagedGroupSoldTo.Managed Group Description] as [ManagedGroupSoldTo.Managed Group Code Description]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MANAGEDGROUP\DATA\ManagedGroupSoldTo.qvd
(qvd)
Where Exists (%KEY_MANAGE_GROUP);



Manage_Group:
LOAD 
	 %KEY_MANAGE_GROUP as %KEY_PAYER_MANAGE_GROUP, 
     [ManagedGroupSoldTo.Managed Group No ] as [ManagedGroupPayer.Managed Group No ], 
     [ManagedGroupSoldTo.Managed Group Description] as  [ManagedGroupPayer.Managed Group Description],
     [ManagedGroupSoldTo.Managed Group No ]& '-' &  [ManagedGroupSoldTo.Managed Group Description] as [ManagedGroupPayer.Managed Group Code Description]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MANAGEDGROUP\DATA\ManagedGroupSoldTo.qvd
(qvd)
Where Exists (%KEY_PAYER_MANAGE_GROUP,%KEY_MANAGE_GROUP);


ACTIVEPAYER_MANAGE_GROUP: 
LOAD Distinct
	 %KEY_MANAGE_GROUP as %KEY_ACTIVEPAYER_MANAGE_GROUP, 
    [ManagedGroupSoldTo.Managed Group No ] as [ManagedGroupActivePayer.Managed Group No ], 
     [ManagedGroupSoldTo.Managed Group Description] as  [ManagedGroupActivePayer.Managed Group Description],
    [ManagedGroupSoldTo.Managed Group No ]& '-' &  [ManagedGroupSoldTo.Managed Group Description] as [ManagedGroupActivePayer.Managed Group Code Description]

FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MANAGEDGROUP\DATA\ManagedGroupSoldTo.qvd
(qvd)
Where Exists (%KEY_ACTIVEPAYER_MANAGE_GROUP,%KEY_MANAGE_GROUP) and len(trim([ManagedGroupSoldTo.Managed Group No ])) >0;


ACTIVEMASTERPAYER_MANAGE_GROUP: 
LOAD Distinct
	 %KEY_MANAGE_GROUP as %KEY_ACTIVEMASTERPAYER_MANAGE_GROUP, 
     [ManagedGroupSoldTo.Managed Group No ] as [ManagedGroupActiveMasterPayer.Managed Group No ], 
     [ManagedGroupSoldTo.Managed Group Description] as  [ManagedGroupActiveMasterPayer.Managed Group Description],
    [ManagedGroupSoldTo.Managed Group No ]& '-' &  [ManagedGroupSoldTo.Managed Group Description] as [ManagedGroupActiveMasterPayer.Managed Group Code Description]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MANAGEDGROUP\DATA\ManagedGroupSoldTo.qvd
(qvd)
Where Exists (%KEY_ACTIVEMASTERPAYER_MANAGE_GROUP,%KEY_MANAGE_GROUP) and len(trim([ManagedGroupSoldTo.Managed Group No ])) >0;


///$tab Material
//Left Keep (Fact)
Material:
LOAD 
	%KEY_MATERIAL,
	 Material.Y_Number, 
     Material.Y_Number_Desc, 
     Material.Description, 
     Material.NetWeight, 
     Material.WeightUnit, 
     Material.BaseUnitOfMeasure, 
     Material.UPC, 
//     Material.ProductHierarchy as %KEY_PRODUCT_HIERARCHY, 
     Material.BasicMaterial,
     Material.Length, 
     Material.Width, 
     Material.Height, 
     Material.UnitofDimension
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MATERIAL\DATA\Material.qvd
(qvd) Where Exists(%KEY_MATERIAL);

Left Join (Material)
LOAD  
     Material_MATNR as %KEY_MATERIAL,  
     [Ext. Material Group_EXTWG] as Trans_Material.StandardCustom,
	 if([Material is configurable_KZKFG]='X', 'VC', 'Std') as ProductType
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\MATERIAL\DATA\MARA.qvd
(qvd);


//Left Keep (Fact)
ActiveMaterial:
LOAD ActiveMaterial.Y_Number, 
    %KEY_ACTIVE_MATERIAL, 
     ActiveMaterial.Y_Number_Desc, 
     ActiveMaterial.Description, 
     ActiveMaterial.NetWeight, 
     ActiveMaterial., 
     ActiveMaterial.BaseUnitOfMeasure, 
     ActiveMaterial.UPC, 
     ActiveMaterial.ProductHierarchy, 
     ActiveMaterial.BasicMaterial,
     ActiveMaterial.Length, 
	ActiveMaterial.Width, 
	ActiveMaterial.Height, 
	ActiveMaterial.UnitofDimension
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\MATERIAL\DATA\ActiveMaterial.qvd
(qvd)
 Where Exists(%KEY_ACTIVE_MATERIAL);
 
 Left Join (ActiveMaterial)
LOAD  
     Material_MATNR as  %KEY_ACTIVE_MATERIAL,  
     [Ext. Material Group_EXTWG] as Active_Material.StandardCustom
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\MATERIAL\DATA\MARA.qvd
(qvd);
///$tab Material Plant
MaterialPlant:
left keep (Fact)
LOAD
	%KEY_MARC,
	[Special procurement_SOBSL] as [Special Procurement], 
	//[MRP Controller_DISPO] as [MRP Controller],
	[Procurement type_BESKZ],
	[MRP group_DISGR]  
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\MATERIAL\DATA\MARC.qvd
(qvd);


Active_MaterialPlant:
left keep (Fact)
LOAD
	 %KEY_MARC as %KEY_MARC_ACTIVE,
	[Special procurement_SOBSL] as [Active_Special Procurement], 
	[MRP Controller_DISPO] as [Active_MRP Controller],
	[Procurement type_BESKZ] as Active_Procurement,
	[MRP group_DISGR] as Active_MRP_group_DISGR,
	[Plant_WERKS]
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\MATERIAL\DATA\MARC.qvd
(qvd);

Left Join (Active_MaterialPlant)
LOAD [Plant_WERKS],
[MRP Controller_DISPO] as [Active_MRP Controller],      
 [MRP Controller_DISPO]  &'-'&   [MRP controller name_DSNAM] as [Active MRP Controller Desc]
FROM
\\etl.ebi.insidebrady.com\repository$\02.CONFIG\MRP_CONTROLLER\DATA\T024D.qvd (qvd)
where Exists([Plant_WERKS]);

drop fields [Plant_WERKS] from Active_MaterialPlant;


///$tab ProdHie
//Left Keep (Fact)
ProdHie:
LOAD 
	  %KEY_PRODUCT_HIERARCHY, 
     PH.ProductHierarchy, 
     PH.Lvl_One, 
     PH.Lvl_Two, 
     PH.Lvl_Three, 
     PH.Lvl_Four, 
     PH.Lvl_Five
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_HIER\DATA\ProductHierarchy.qvd
(qvd)Where Exists(%KEY_PRODUCT_HIERARCHY);


//Left Keep (Fact)
ActiveMaterialProdHier:
LOAD  %KEY_ACTIVE_MATERIAL_PRODUCT_HIERARCHY, 
     ActiveMaterial_PH.ProductHierarchy, 
     ActiveMaterial_PH.Lvl_One, 
     ActiveMaterial_PH.Lvl_Two, 
     ActiveMaterial_PH.Lvl_Three, 
     ActiveMaterial_PH.Lvl_Four, 
     ActiveMaterial_PH.Lvl_Five
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_HIER\DATA\ActiveMaterial_ProductHierarchy.qvd
(qvd) Where Exists(%KEY_ACTIVE_MATERIAL_PRODUCT_HIERARCHY)
;

///$tab GPM
GlobalProductManagerAssignment: 
Left join (Fact)
LOAD Distinct
	F1 as %KEY_GPM,
	Platform, 
	[IDS Platform], 
	GPM, 
	[Sub Category 1], 
	[Sub Category 2], 
	[Sub Category 3], 
	[Sub Category 4],
	[SIOP Family]
FROM
[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\Global Product Manager Assignment.xlsx]
//[G:\01.Repository\30.LOGICAL_LAYER\03.DIMENSIONS\GPM\Global Product Manager Assignment 7-31-18 WITH BP CHANGE (2).xlsx]
(ooxml, embedded labels, table is Sheet1)
;
///$tab SoldTo
//TEMPANZSICDESC:
//Mapping LOAD 
//     ANZSIC_4, 
//     ANZSIC_4_Desc
//     
//FROM
//[G:\01.Repository\02.CONFIG\ANZSIC\DATA\AU_ANZSIC.qvd]
//(qvd);
//
//ANZSIC_1:
//Mapping LOAD 
//     ANZSIC_4, 
//     ANZSIC_1
//FROM
//[G:\01.Repository\02.CONFIG\ANZSIC\DATA\AU_ANZSIC.qvd]
//(qvd);
//
//ANZSICDESC:
//Mapping load
//Customer_KUNNR,
//applymap('ANZSIC_1',[Customer Master : User defined field_USR15],null())&''&[Customer Master : User defined field_USR15] &'/'& applymap('TEMPANZSICDESC', [Customer Master : User defined field_USR15],null()) as [Sold-to ANSI_Code] 
//FROM
//\\etl.ebi.insidebrady.com\repository$\03.MASTER\CUSTOMER\DATA\ZSCUSR01.qvd
//(qvd) where len(trim([Customer Master : User defined field_USR15]))>0;//

SoldTo:
LOAD 
	 %KEY_SOLD_TO,
	 SoldTo.NAICS_Code, 
     SoldTo.PostalCode, 
     SoldTo.CountryCode,
     SoldTo.RegionNameCode,
//if(isnull(trim(ApplyMap('Map_T005U', SoldTo.CountryCode&'/'&SoldTo.RegionCode,null()))),' ',
//ApplyMap('Map_T005U', SoldTo.CountryCode&'/'&SoldTo.RegionCode,null())) as SoldTo.RegionNameCode,
     SoldTo.RegionCode, 
     SoldTo.Name, 
     SoldTo.AuxCompany, 
     SoldTo.Street, 
     SoldTo.City, 
     SoldTo.Telephone, 
     SoldTo.CustomerClassCode, 
     SoldTo.SIC, 
     SoldTo.SIC2, 
     SoldTo.DeleteFlag, 
     SoldTo.DealerDistributorClass, 
    [Number of Employees] as SoldTo.NumberOfEmployess,
    // if(IsNull(SoldTo.NumberOfEmployess),'',
//     if(SoldTo.NumberOfEmployess>=1  and SoldTo.NumberOfEmployess<=4,'1-4',
//     if(SoldTo.NumberOfEmployess>=5  and SoldTo.NumberOfEmployess<=9,'5-9',
//     if(SoldTo.NumberOfEmployess>=10 and SoldTo.NumberOfEmployess<=24,'10-24',
//     if(SoldTo.NumberOfEmployess>=25 and SoldTo.NumberOfEmployess<=49,'25-49',
//     if(SoldTo.NumberOfEmployess>=50 and SoldTo.NumberOfEmployess<=249,'50-249',
//     if(SoldTo.NumberOfEmployess>=250,'250+',null())))))) as SoldTo.NumberOfEmployess,
     //applymap('ANZSICDESC', %KEY_SOLD_TO,null()) as [Sold-to ANSI_Code],
     [Sold-to ANSI_Code],
	 [Sold-to ANSI_Code_Desc],  
     SoldTo.IndustryCode_Two, 
     SoldTo.IndustryCode_Three, 
     SoldTo.IndustryCode_Four, 
     SoldTo.IndustryCode_Five, 
     SoldTo.CustomerClass, 
     SoldTo.Num_Name, 
     SoldTo.Number, 
     SoldTo.SIC_ThreeDigit, 
     SoldTo.SIC_TwoDigit, 
     SoldTo.GeoCode, 
     SoldTo.Country, 
     SoldTo.RegionCode_Desc, 
     SoldTo.Region, 
     SoldTo.Latitude, 
     SoldTo.Longitude, 
     SoldTo.NAICS_Desc,
	 SoldTo.Distributor_Class as [SoldTo Distributor_Class],
//     applymap('mapSFDCAccountID', %KEY_SOLD_TO,'') as SoldTo.SFDC_AccountID,
//     applymap('mapAccountClosed', %KEY_SOLD_TO,'') as SoldTo.AccountClosed, 	 
// 	 applymap('mapAccountDateOfClosure', %KEY_SOLD_TO,'') as SoldTo.AccountCloseDate,
// 	 // SoldToSurvivor.Number, 
// 	  replace(ltrim( replace(SoldToSurvivor.Number,0,' ' )),' ',0) as SoldToSurvivor.Number,
//subfield(applymap('ANZSICDESC', %KEY_SHIP_TO,null()),'/',1) as [ShipTo ANSI_Code],
 	  SoldToSurvivor.Number,
      SoldToSurvivor.AuxCompany, 
     SoldToSurvivor.City, 
     SoldToSurvivor.Country, 
     SoldToSurvivor.CountryCode, 
     SoldToSurvivor.CustomerClass, 
     SoldToSurvivor.CustomerClassCode, 
     SoldToSurvivor.DealerDistributorClass, 
     SoldToSurvivor.DeleteFlag, 
     SoldToSurvivor.GeoCode, 
     SoldToSurvivor.IndustryCode_Five, 
     SoldToSurvivor.IndustryCode_Four, 
     SoldToSurvivor.IndustryCode_Three, 
     SoldToSurvivor.IndustryCode_Two, 
     SoldToSurvivor.Latitude, 
     SoldToSurvivor.Longitude, 
     SoldToSurvivor.NAICS_Code, 
     SoldToSurvivor.NAICS_Desc, 
     SoldToSurvivor.Name, 
     SoldToSurvivor.Num_Name, 
     SoldToSurvivor.NumberOfEmployess, 
     SoldToSurvivor.PostalCode, 
     SoldToSurvivor.Region, 
     SoldToSurvivor.RegionCode, 
     SoldToSurvivor.RegionCode_Desc, 
     SoldToSurvivor.SIC, 
     SoldToSurvivor.SIC2, 
     SoldToSurvivor.SIC_ThreeDigit, 
     SoldToSurvivor.SIC_TwoDigit, 
     SoldToSurvivor.Street, 
     SoldToSurvivor.Telephone,
	 SoldTo.Gov_Ed_Flag,
	 SoldToSurvivor.Distributor_Class as [SoldToSurvivor Distributor_Class]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SOLD_TO\DATA\SoldTo.qvd
//G:\97.Workarea\Others\Naresh Mule\CPA MN\DATA\SoldTo.qvd
(qvd) Where Exists(%KEY_SOLD_TO);

///$tab ShipTo
ShipTo:
LOAD 
	%KEY_SHIP_TO,
	 ShipTo.NAICS_Code, 
     ShipTo.PostalCode, 
     ShipTo.CountryCode,
     ShipTo.RegionNameCode,
     ShipTo.RegionCode, 
     ShipTo.Name, 
     ShipTo.AuxCompany, 
     ShipTo.Street, 
     ShipTo.City, 
     ShipTo.Telephone, 
     ShipTo.CustomerClassCode, 
     ShipTo.SIC, 
     ShipTo.SIC2, 
     ShipTo.DeleteFlag, 
     ShipTo.DealerDistributorClass, 
     ShipTo.NumberOfEmployess, 
     ShipTo.IndustryCode_Two, 
     ShipTo.IndustryCode_Three, 
     ShipTo.IndustryCode_Four, 
     ShipTo.IndustryCode_Five, 
     ShipTo.CustomerClass, 
     ShipTo.Num_Name, 
     ShipTo.Number, 
     ShipTo.SIC_ThreeDigit, 
     ShipTo.SIC_TwoDigit, 
     ShipTo.GeoCode, 
     ShipTo.Country, 
     ShipTo.RegionCode_Desc, 
     ShipTo.Region, 
     ShipTo.Latitude, 
     ShipTo.Longitude, 
     ShipTo.NAICS_Desc,
 	 [Ship-to ANSI_Code],
	[ShipTo ANSI_Code_Desc],
	ShipTo.BNASalesRegion_Territory,
	ShipTo.BNASalesRegion,
	ShipTo.SPCSpecialist,
	ShipTo.BNASalesRegion_Territory_SFID,
	ShipTo.BNASales_Territory_SFID
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SHIP_TO\DATA\ShipTo.qvd
(qvd) Where Exists(%KEY_SHIP_TO) ;


Left Join(ShipTo)
Load Distinct
	 %KEY_SHIP_TO,
	 %KEY_SHIP_TO as [Ship-to party_KUNAG],
	 if(ShipTo.CountryCode='US' or ShipTo.CountryCode='CA', Upper(ShipTo.CountryCode&'/'&ShipTo.GeoCode),
	 			if(ShipTo.CountryCode='MX',Upper(ShipTo.CountryCode&'/'&ShipTo.RegionCode),Upper(ShipTo.CountryCode))) as %SalesTerritory,
	 if(ShipTo.CountryCode='US' or ShipTo.CountryCode='CA', Upper(ShipTo.CountryCode&'/'&ShipTo.PostalCode),
	 			if(ShipTo.CountryCode='MX',Upper(ShipTo.CountryCode&'/'&ShipTo.RegionCode),Upper(ShipTo.CountryCode))) as %SalesTerritoryPostalCode
Resident ShipTo;


///$tab BNA ASSIGN
mapRegion:
Mapping
LOAD Distinct
     if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&upper([Postal Prefix]),
     	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,
     [BNA Sales Region] as Region
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

mapTerritory:
Mapping
LOAD Distinct
     if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&If(Len(Trim([5 digit Postal Prefix]))=0,upper([Postal Prefix]),[5 digit Postal Prefix]),
     	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,
     [PWID (Default) Sales Territory] as Territory
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

mapRegionTerritory:
Mapping
LOAD Distinct
     if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&If(Len(Trim([5 digit Postal Prefix]))=0,upper([Postal Prefix]),[5 digit Postal Prefix]),
     	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,
     [BNA Sales Region] & ': ' & [PWID (Default) Sales Territory] as RegionTerritory
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

mapRSSM:
Mapping
LOAD Distinct
     if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&upper([Postal Prefix]),
     	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,
     [SPC Specialist]
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

mapTerritory_SFID:  
Mapping
LOAD Distinct
	if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&upper([Postal Prefix]),
	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,
	if(IsNull(trim( [SFID Sales Territory])),[PWID (Default) Sales Territory],[SFID Sales Territory])  as  [SFID_Territory]
     
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

mapRegionTerritory_SFID:
Mapping
LOAD Distinct
	if(Upper([Country Code])='US' or Upper([Country Code])='CA',upper([Country Code])&'/'&upper([Postal Prefix]),
	if(Upper([Country Code])='MX',Upper([Country Code])&'/'&Upper([State Prov]),Upper([Country Code]))) as %SalesTerritory,

	[BNA Sales Region] &': '&  if(IsNull(trim( [SFID Sales Territory])),[PWID (Default) Sales Territory],[SFID Sales Territory]) as SFID_RegionTerritory
FROM
\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\Global_References\BNA - Sales Territory Assignments.xlsx
(ooxml, embedded labels, table is [CURRENT Assignments]);

BNA_Assignment:
Load Distinct
	 [Ship-to party_KUNAG],
	 %SalesTerritory,
	 %SalesTerritoryPostalCode
//	 ApplyMap('mapRegion',%SalesTerritory,'Unknown') as Region,
//	 ApplyMap('mapTerritory',%SalesTerritory,'Unknown') as Territory,
//	 ApplyMap('mapRegionTerritory',%SalesTerritory,'Unknown') as RegionTerritory,
//	 ApplyMap('mapRM',%SalesTerritory,'Unknown') as RM,
//	 ApplyMap('mapRSSM',%SalesTerritory,'Unknown') as RSSM
//	 ApplyMap('mapIS',%SalesTerritory,'Unknown') as [IS]
Resident ShipTo;

Right Join(BNA_Assignment)
LOAD distinct
	 %KEY_SHIP_TO as [Ship-to party_KUNAG],
	 [IDS Platform],
	 %KEY_VBAP
Resident Fact;

Left Join(BNA_Assignment)
LOAD distinct
//	 [Ship-to party_KUNAG],
	 %KEY_VBAP,
	 ApplyMap('mapRegion',%SalesTerritory,'Unknown') as Region,
	 ApplyMap('mapRSSM',%SalesTerritory,'Unknown') as RSSM,
	 If([IDS Platform]='SFID',ApplyMap('mapTerritory_SFID',%SalesTerritory,'Unknown'),
		ApplyMap('mapTerritory',%SalesTerritoryPostalCode,ApplyMap('mapTerritory',%SalesTerritory,'Unknown'))) as Territory,
	 If([IDS Platform]='SFID',ApplyMap('mapRegionTerritory_SFID',%SalesTerritory,'Unknown'),
		ApplyMap('mapRegionTerritory',%SalesTerritoryPostalCode,ApplyMap('mapRegionTerritory',%SalesTerritory,'Unknown'))) as RegionTerritory
Resident BNA_Assignment;

drop fields [IDS Platform], %SalesTerritory, %SalesTerritoryPostalCode, [Ship-to party_KUNAG] from BNA_Assignment;

//
//ShipTo:
//LOAD 
//	%KEY_SHIP_TO,
//	 ShipTo.NAICS_Code, 
//     ShipTo.PostalCode, 
//     ShipTo.CountryCode,
//     //ShipTo.CountryCode&'-'&ShipTo.RegionCode_Desc as ShipTo.RegionNameCode, 
////      if(isnull(trim(ApplyMap('Map_T005U', ShipTo.CountryCode&'/'&ShipTo.RegionCode,null()))),' ',
////      ApplyMap('Map_T005U', ShipTo.CountryCode&'/'&ShipTo.RegionCode,null())) as ShipTo.RegionNameCode,
//      ShipTo.RegionNameCode,
//     ShipTo.RegionCode, 
//     ShipTo.Name, 
//     ShipTo.AuxCompany, 
//     ShipTo.Street, 
//     ShipTo.City, 
//     ShipTo.Telephone, 
//     ShipTo.CustomerClassCode, 
//     ShipTo.SIC, 
//     ShipTo.SIC2, 
//     ShipTo.DeleteFlag, 
//     ShipTo.DealerDistributorClass, 
//     ShipTo.NumberOfEmployess, 
//     ShipTo.IndustryCode_Two, 
//     ShipTo.IndustryCode_Three, 
//     ShipTo.IndustryCode_Four, 
//     ShipTo.IndustryCode_Five, 
//     ShipTo.CustomerClass, 
//     ShipTo.Num_Name, 
//     ShipTo.Number, 
//     ShipTo.SIC_ThreeDigit, 
//     ShipTo.SIC_TwoDigit, 
//     ShipTo.GeoCode, 
//     ShipTo.Country, 
//     ShipTo.RegionCode_Desc, 
//     ShipTo.Region, 
//     ShipTo.Latitude, 
//     ShipTo.Longitude, 
//     ShipTo.NAICS_Desc,
////     applymap('mapSFDCAccountID', %KEY_SHIP_TO,'') as ShipTo.SFDC_AccountID, 	 
//// 	 applymap('mapAccountClosed', %KEY_SHIP_TO,'') as ShipTo.AccountClosed, 	 
//// 	 applymap('mapAccountDateOfClosure', %KEY_SHIP_TO,'') as ShipTo.AccountCloseDate,
//// 	 //applymap('ANZSICDESC', %KEY_SHIP_TO,null()) as [ShipTo ANSI_Code]
// 	  
// 	  [Ship-to ANSI_Code],
//	[ShipTo ANSI_Code_Desc]
//FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SHIP_TO\DATA\ShipTo.qvd
//(qvd) Where Exists(%KEY_SHIP_TO) ;
//
///$tab Payer
//Left Keep (Fact)
Payer:
LOAD 
	%KEY_PAYER,
	 Payer.NAICS_Code, 
     Payer.PostalCode, 
     Payer.CountryCode, 
     Payer.RegionCode, 
     Payer.Name, 
     Payer.AuxCompany, 
     Payer.Street, 
     Payer.City, 
     Payer.Telephone, 
     Payer.CustomerClassCode, 
     Payer.SIC, 
     Payer.SIC2, 
     Payer.DeleteFlag, 
     Payer.DealerDistributorClass, 
     Payer.NumberOfEmployess, 
     Payer.IndustryCode_Two, 
     Payer.IndustryCode_Three, 
     Payer.IndustryCode_Four, 
     Payer.IndustryCode_Five, 
     Payer.CustomerClass, 
     Payer.Num_Name, 
     Payer.Number, 
     Payer.SIC_ThreeDigit, 
     Payer.SIC_TwoDigit, 
     Payer.GeoCode, 
     Payer.Country, 
     Payer.RegionCode_Desc, 
     Payer.Region, 
     Payer.Latitude, 
     Payer.Longitude, 
     Payer.NAICS_Desc,
	 Payer.Distributor_Class as [Payer Distributor_Class],
//     applymap('mapSFDCAccountID', %KEY_PAYER,'') as Payer.SFDC_AccountID, 	 
//     applymap('mapAccountClosed', %KEY_PAYER,'') as Payer.AccountClosed, 	 
// 	 applymap('mapAccountDateOfClosure', %KEY_PAYER,'') as Payer.AccountCloseDate,
// 	// applymap('ANZSICDESC', %KEY_PAYER,null()) as [Payer ANSI_Code],
 	 [Payer ANSI_Code],
	 [Payer ANSI_Code_Desc],
 	  //PayerSurvivor.Number,
 	 // replace(ltrim( replace(PayerSurvivor.Number,0,' ' )),' ',0) as PayerSurvivor.Number,
 	  PayerSurvivor.Number,
     PayerSurvivor.AuxCompany, 
     PayerSurvivor.City, 
     PayerSurvivor.Country, 
     PayerSurvivor.CountryCode, 
     PayerSurvivor.CustomerClass, 
     PayerSurvivor.CustomerClassCode, 
     PayerSurvivor.DealerDistributorClass, 
     PayerSurvivor.DeleteFlag, 
     PayerSurvivor.GeoCode, 
     PayerSurvivor.IndustryCode_Five, 
     PayerSurvivor.IndustryCode_Four, 
     PayerSurvivor.IndustryCode_Three, 
     PayerSurvivor.IndustryCode_Two, 
     PayerSurvivor.Latitude, 
     PayerSurvivor.Longitude, 
     PayerSurvivor.NAICS_Code, 
     PayerSurvivor.NAICS_Desc, 
     PayerSurvivor.Name, 
     PayerSurvivor.Num_Name, 
     PayerSurvivor.NumberOfEmployess, 
     PayerSurvivor.PostalCode, 
     PayerSurvivor.Region, 
     PayerSurvivor.RegionCode, 
     PayerSurvivor.RegionCode_Desc, 
     PayerSurvivor.SIC, 
     PayerSurvivor.SIC2, 
     PayerSurvivor.SIC_ThreeDigit, 
     PayerSurvivor.SIC_TwoDigit, 
     PayerSurvivor.Street, 
     PayerSurvivor.Telephone,
	 Payer.Gov_Ed_Flag,
	 PayerSurvivor.Gov_Ed_Flag,
	 PayerSurvivor.Distributor_Class as [PayerSurvivor Distributor_Class]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\data\Payer.qvd
(qvd) Where Exists(%KEY_PAYER);


PayerBuyingGroup:
LOAD 
%KEY_PAYER as %KEY_PAYER_BUYING_GROUP,
Payer.Number as [Payer Buying Group],
Payer.Name as [Payer Buying Group Name]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\DATA\Payer.qvd
(qvd) where Exists(%KEY_PAYER_BUYING_GROUP,%KEY_PAYER);

ActivePayerBuyingGroup:
LOAD 
%KEY_PAYER as %KEY_ACTIVEPAYER_BUYING_GROUP,
Payer.Number as [ActivePayer Buying Group],
Payer.Name as [ActivePayer Buying Group Name]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\DATA\Payer.qvd
(qvd) where Exists(%KEY_ACTIVEPAYER_BUYING_GROUP,%KEY_PAYER);

ActiveMasterPayerBuyingGroup:
LOAD 
%KEY_PAYER as %KEY_ACTIVEMASTERPAYER_BUYING_GROUP,
Payer.Number as [ActiveMasterPayer Buying Group],
Payer.Name as [ActiveMasterPayer Buying Group Name]
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\DATA\Payer.qvd
(qvd) where Exists(%KEY_ACTIVEMASTERPAYER_BUYING_GROUP,%KEY_PAYER);



ActivePayer:
LOAD 
	%KEY_PAYER as Active_Payer,
	Payer.Number as ActivePayerNo,
	Payer.Name as ActivePayerName,
	Payer.AuxCompany as ActivePayer.AuxCompany,
    Payer.Street as ActivePayer.Street,
    Payer.City as ActivePayer.City,
    Payer.Region as  ActivePayer.Region,
    Payer.PostalCode as ActivePayer.PostalCode,
    Payer.Country as ActivePayer.Country,
    Payer.CustomerClass as ActivePayer.CustomerClass
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\DATA\Payer.qvd
(qvd) where exists(Active_Payer,%KEY_PAYER);

ActiveMasterPayer:
LOAD 
	%KEY_PAYER as Active_Master_Payer,
	Payer.Number as ActiveMasterPayerNo,
	Payer.Name as ActiveMasterPayerName,
    Payer.AuxCompany as ActiveMasterPayer.AuxCompany,
    Payer.Street as ActiveMasterPayer.Street,
    Payer.City as ActiveMasterPayer.City,
    Payer.Region as  ActiveMasterPayer.Region,
    Payer.PostalCode as ActiveMasterPayer.PostalCode,
    Payer.Country as ActiveMasterPayer.Country,
    Payer.CustomerClass as ActiveMasterPayer.CustomerClass

FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\DATA\Payer.qvd
(qvd) where exists(Active_Master_Payer,%KEY_PAYER);

///$tab Contact
//Left Keep (Fact)
Contact:
LOAD 
	 %KEY_CONTACT,
	 Contact.PersonNumber, 
     Contact.Number, 
     Contact.FirstName, 
     Contact.LastName, 
     Contact.Title, 
     Contact.Phone, 
     Contact.Email_One, 
     Contact.Email_Two
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CONTACT\DATA\Contact.qvd
(qvd)  Where Exists(%KEY_CONTACT) ;

///$tab Disposition 
ZSDDISP_TEMP:
LOAD distinct
[Reference document_VBELN] as [Sales Document],
[Disposition Code_DISCD],
[Created on_ERDAT],
[Time_ERZET]
 
FROM
\\etl.ebi.insidebrady.com\repository$\04.TRANSACTION\INSIDE_SALES_DISPOSITION\DATA\ZSDDISP.qvd
(qvd)where exists([Sales Document],[Reference document_VBELN]);

inner join(ZSDDISP_TEMP)
load 
[Sales Document],
max([Created on_ERDAT]) as [Created on_ERDAT]
resident ZSDDISP_TEMP
group by [Sales Document];

inner join(ZSDDISP_TEMP)
load 
[Sales Document],
max([Time_ERZET]) as [Time_ERZET]
resident ZSDDISP_TEMP
group by [Sales Document];

ZSDDISP:
load distinct
[Sales Document],
[Disposition Code_DISCD]
resident ZSDDISP_TEMP;

drop table ZSDDISP_TEMP;

///$tab SalesTeam
STeam_In:
LOAD Distinct
	 [Sales Team_SALES_TEAM] as %KEY_SALES_TEAM_IN,
 	 [Sales Team_SALES_TEAM] as [Sales Team (In) No],
     [Sales Team Desc._SALES_TEAM_DESC] as [Sales Team (In)]
FROM
\\etl.ebi.insidebrady.com\repository$\02.CONFIG\SALES_TEAMS\DATA\ZSDSLST.QVD
(qvd);


ZSDSLST:
LOAD Distinct
     [Sales Team_SALES_TEAM] AS %KEY_ZSDSLST, 
     [Sales Team Desc._SALES_TEAM_DESC]
 FROM
\\etl.ebi.insidebrady.com\repository$\02.CONFIG\SALES_TEAMS\DATA\ZSDSLST.QVD
(qvd);


SalesTeam:
LOAD %KEY_SALES_TEAM, 
     SalesTeam.Region_Mgr, 
     SalesTeam.Sales_Person, 
     SalesTeam.Sales_Team_No as [Sales Team (Out) No] , 
     SalesTeam.Sales_Team_Desc as [Sales Team (Out)], 
     SalesTeam.Sales_Region_Desc
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_TEAM\DATA\SalesTeam.qvd
(qvd)
Where Exists (%KEY_SALES_TEAM);

EndUserDetails:
left Keep(Fact)
Load Distinct 
	[Customer_KUNNR] as [End User #],
    [Name_NAME1] as [End User Name],
	[Primary SIC code (Customer master ext)_ZZ_SIC01] as [End User SIC]
from \\etl.ebi.insidebrady.com\repository$\03.MASTER\CUSTOMER\DATA\ZBI_KNA1.qvd (qvd);


MAP_INDUS_DESC:
Mapping
LOAD  Distinct
      [Possible value in Pull-down listing_VALUE], 
      [Screen Field description_DESCRIPTION]
FROM
\\etl.ebi.insidebrady.com\repository$\02.CONFIG\CUSTOMER_PULLDOWN_CODES\DATA\ZSCCODE.qvd (qvd)
where  [Screen Field name_FIELDNAME] = 'ZSCCUSDT-INDUSTRY';

ZE_END_USER_INDUSTRY_Code:
left Keep(Fact)
LOAD  Distinct
     Customer_KUNNR&'/'&[Sales Organization_VKORG]&'/'&[Distribution Channel_VTWEG]&'/'&[Division extension_DIVEXT] as %KEY_ZE_END_USER_INDUSTRY, 
      [Industry code for Customer_INDUSTRY]&'-'&ApplyMap('MAP_INDUS_DESC',[Industry code for Customer_INDUSTRY],null()) as [ZE End User Industry Code]
FROM
\\etl.ebi.insidebrady.com\repository$\03.MASTER\CUSTOMER\DATA\ZSCCUSDT.qvd
(qvd) Where Exists(%KEY_ZE_END_USER_INDUSTRY,Customer_KUNNR&'/'&[Sales Organization_VKORG]&'/'&[Distribution Channel_VTWEG]&'/'&[Division extension_DIVEXT] )
and len(trim([Industry code for Customer_INDUSTRY]))>0;

///$tab New dims2

ZSCCODE_DESC:
LOAD 
     [Possible value in Pull-down listing_VALUE],
     [Possible value in Pull-down listing_VALUE]&'-'& [Screen Field description_DESCRIPTION] as DESC,
     [Screen Field name_FIELDNAME]
FROM
\\etl.ebi.insidebrady.com\repository$\02.CONFIG\CUSTOMER_PULLDOWN_CODES\DATA\ZSCCODE.qvd
(qvd);

MAP_USR06:
Mapping
LOAD 
     [Possible value in Pull-down listing_VALUE],
      DESC 
Resident ZSCCODE_DESC
where [Screen Field name_FIELDNAME]='ZSCUSR02-USR06';

MAP_USR08:
Mapping
LOAD 
     [Possible value in Pull-down listing_VALUE],
      DESC
Resident ZSCCODE_DESC
where [Screen Field name_FIELDNAME]='ZSCUSR02-USR08';

MAP_USR10:
Mapping
LOAD 
     [Possible value in Pull-down listing_VALUE],
      DESC 
Resident ZSCCODE_DESC
where [Screen Field name_FIELDNAME]='ZSCUSR02-USR10';

/* MAP_USR11:
Mapping
LOAD 
     [Possible value in Pull-down listing_VALUE],
      DESC 
Resident ZSCCODE_DESC
where [Screen Field name_FIELDNAME]='ZSCUSR02-USR11'; */

drop Table ZSCCODE_DESC;

MAP_USR11:
Mapping
LOAD distinct 
     [Customer type_ZTYPE], 
     [Customer type_ZTYPE]&'-'& [Screen Field description_DESCRIPTION] as DescNew
FROM
[\\etl.ebi.insidebrady.com\repository$\02.CONFIG\CUSTOMER BUSINESS TYPE\DATA\ZCUSBUSTYP.qvd]
(qvd) where len(trim([Customer type_ZTYPE]))>0;

ZSCUSR02_ORG:
LOAD  distinct
  Customer_KUNNR&'/'& [Sales Organization_VKORG]&'/'& [Distribution Channel_VTWEG]&'/'&[Division extension_DIVEXT] as %KEY_PAYER_ZSCUSR, 
  [Customer Master : User defined field_USR06],
 [Customer Master : User defined field_USR08],
 [Customer Master : User defined field_USR10],
  [Customer Master : User defined field_USR11],
  [Customer Master : User defined field_USR19] as [Code Cust ID]
FROM	
\\etl.ebi.insidebrady.com\repository$\03.MASTER\CUSTOMER\DATA\ZSCUSR02.qvd
(qvd);

Payer_Reseller_Dims:
left Keep(Fact)
LOAD  distinct
 %KEY_PAYER_ZSCUSR, 
  ApplyMap('MAP_USR06',[Customer Master : User defined field_USR06],null()) as [Payer Reseller Type],
 ApplyMap('MAP_USR10',[Customer Master : User defined field_USR10],null()) as [Payer Line of Business],
 ApplyMap('MAP_USR11', [Customer Master : User defined field_USR11]) as [Payer Customer Type]
Resident ZSCUSR02_ORG;
//where len(trim([Customer Master : User defined field_USR06]))>0;


PayerSurvivor_ZSCUSR02:
left Keep(Fact)
Load  distinct
%KEY_PAYER_ZSCUSR as %KEY_PAYER_ZSCUSR_SURVIVOR,
 ApplyMap('MAP_USR10',[Customer Master : User defined field_USR10],null())  as  [PayerSurvivor Line of Business],  
ApplyMap('MAP_USR11', [Customer Master : User defined field_USR11]) as [PayerSurvivor Customer Type]
Resident ZSCUSR02_ORG;

SoldTo_Reseller_Dims:
left Keep(Fact)
LOAD  distinct
 %KEY_PAYER_ZSCUSR as %KEY_SOLDTO_ZSCUSR, 
  ApplyMap('MAP_USR06',[Customer Master : User defined field_USR06],null()) as [SoldTo Reseller Type],
  ApplyMap('MAP_USR10',[Customer Master : User defined field_USR10],null()) as [SoldTo Line of Business],
  ApplyMap('MAP_USR11',[Customer Master : User defined field_USR11]) as [SoldTo Customer Type],
  [Code Cust ID]
Resident ZSCUSR02_ORG;
 //where len(trim([Customer Master : User defined field_USR06]))>0;
 
 SoldToSurvivor_Reseller_Dims:
left Keep(Fact)
LOAD  distinct
 %KEY_PAYER_ZSCUSR as %KEY_ZSCUSR02_SOLDTO_SURVIVOR, 
  ApplyMap('MAP_USR10',[Customer Master : User defined field_USR10],null()) as [SoldToSurvivor Line of Business],
  ApplyMap('MAP_USR11',[Customer Master : User defined field_USR11]) as [SoldToSurvivor Customer Type]
Resident ZSCUSR02_ORG;
 
 ActivePayer_Reseller_Dims:
 left Keep(Fact)
LOAD  distinct
 %KEY_PAYER_ZSCUSR AS %KEY_ACTIVE_PAYER_ZSCUSR, 
 ApplyMap('MAP_USR06',[Customer Master : User defined field_USR06],null()) as [Active Payer Reseller Type],
 ApplyMap('MAP_USR10',[Customer Master : User defined field_USR10],null()) as [ActivePayer Line of Business],
 ApplyMap('MAP_USR11', [Customer Master : User defined field_USR11]) as [ActivePayer Customer Type]
Resident ZSCUSR02_ORG;
//where len(trim([Customer Master : User defined field_USR06]))>0;

ActiveMasterPayer_Reseller:
left Keep(Fact)
LOAD  distinct
 %KEY_PAYER_ZSCUSR AS %KEY_ACTIVE_MASTER_PAYER_ZSCUSR, 
  ApplyMap('MAP_USR06',[Customer Master : User defined field_USR06],null()) as [Active Master Payer Reseller Type]
Resident ZSCUSR02_ORG
where len(trim([Customer Master : User defined field_USR06]))>0;

drop table ZSCUSR02_ORG;






///$tab New Catalog
CatalaogDesc:
left Keep(Fact)
LOAD %KEY_CATALOG_DESC, 
//     [Catalog Number_ZZCATLG] as [Catalog.Catalog Number], 
//     [Sales Organization_VKORG], 
//     Division_SPART, 
     [Catalog Description_ZZCATDESC] as [Catalog.Catalog Description]
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd]
(qvd) where Exists(%KEY_CATALOG_DESC) ;




CatalaogAttr:
left Keep(Fact)
LOAD %KEY_CATALOG_NUM, 
 //    [Catalog Number_ZZCATLG] as [Catalog.Catalog Number], 
//     [Sales Organization_VKORG], 
//     Division_SPART, 
     [Created on_ERDAT], 
     [Intro Date_ZZDATE], 
     //[Business Unit_ZZBUNT], 
     [Business Unit Desc] as [Business Unit_ZZBUNT],
     [Space Code]
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd
//[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\Catalog_Attr.qvd]
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\Catalog_Attr.qvd]
(qvd) where Exists(%KEY_CATALOG_NUM) and ActiveFlag = 1;

//QUALIFY*;
left Keep(Fact)
MaterialEntDesc:
LOAD %KEY_CATALOG_DESC as %KEY_MATERIAL_ENT_DESC, 
//     [Catalog Number_ZZCATLG] as MaterialEnt#,
     [Catalog Description_ZZCATDESC] as MaterialEntDesc
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd
//[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd] 
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd]
(qvd);


left Keep(Fact)
MaterialEntAttr:
LOAD %KEY_CATALOG_NUM as %KEY_CATALOG_MATENT, 
     [Catalog Number_ZZCATLG] as MaterialEnt#,
     [Created on_ERDAT] as MaterialEntDesc_CreatedDate, 
     [Intro Date_ZZDATE] as MaterialEntDesc_IntroDate, 
     [Business Unit_ZZBUNT] as MaterialEntDesc_BusinessUnit, 
     [Space Code] as MaterialEntDesc_SpaceCode
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\CatalogDesc.qvd
//[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\Catalog_Attr.qvd] 
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\Catalog_Attr.qvd]
(qvd);

///$tab Product Family
ProductFamily:
LOAD 
     %KEY_CATALOG_MATENT, 
     [ProductFamily.Sales Org], 
     ProductFamily.Division, 
     [ProductFamily.Distribution Channel], 
     [ProductFamily.Product Family], 
      [ProductFamily.Product Family Desc],
      [ProductFamily.Space Code],  
     [ProductFamily.SpaceCode Description], 
     [ProductFamily.Active Flag], 
     [ProductFamily.Product Category 2],
      [ProductFamily.Product Category 1], 
     [ProductFamily.Product Category 2 Desc], 
     [ProductFamily.Product Category 1 Desc],
     [ProductFamily.Product Manager]
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\ProductFamily.qvd
//[G:\97.Workarea\Others\Naresh Mule\BNA Adhoc\New chanhes catalog\PRODUCT_FAMILY_LINE\DATA\ProductFamily.qvd]
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\ProductFamily.qvd]
(qvd);// Where Exists (%KEY_CATALOG_MATENT);


ProductLine:
LOAD 
      %KEY_CATALOG_MATENT,
     [ProductLine.Sales Org], 
     ProductLine.Division, 
     [ProductLine.Distribution Channel], 
     [ProductLine.Product Line], 
     [ProductLine.Product Line Desc], 
     [ProductLine.Product Manager]
FROM
//\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\ProductLine.qvd
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PRODUCT_FAMILY_LINE\DATA\ProductLine.qvd]
(qvd)
 Where Exists(%KEY_CATALOG_MATENT);

///$tab SalesArea
//
PayerSalesArea:
LOAD %KEY_PAYER_SALES_AREA,// as %KEY_PAYER_SALES_AREA, 
     Payer.D1, 
     Payer.D2, 
     Payer.D3, 
     Payer.D4, 
     Payer.Distributor
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_AREA\DATA\PAYER_Sales_Area.qvd
(qvd)
 Where Exists(%KEY_PAYER_SALES_AREA);

//
MasterPayerSalesArea:
LOAD  %KEY_MASTER_PAYER_SALES_AREA, // as %KEY_MASTER_PAYER_SALES_AREA,
     MasterPayer.D1, 
     MasterPayer.D2, 
     MasterPayer.D3, 
     MasterPayer.D4, 
     MasterPayer.Distributor
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_AREA\DATA\MASTER_PAYER_Sales_Area.qvd
(qvd)
 Where Exists( %KEY_MASTER_PAYER_SALES_AREA);

//
ShipToSalesArea:
LOAD  %KEY_SHIP_TO_SALES_AREA ,//as %KEY_SHIP_TO_SALES_AREA,
     ShipTo.D1, 
     ShipTo.D2, 
     ShipTo.D3, 
     ShipTo.D4, 
     ShipTo.Distributor
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_AREA\DATA\SHIP_TO_Sales_Area.qvd
(qvd)
 Where Exists(%KEY_SHIP_TO_SALES_AREA);


SoldToSalesArea:
LOAD  %KEY_SOLD_TO_SALES_AREA,//as %KEY_SOLD_TO_SALES_AREA,
     SoldTo.D1, 
     SoldTo.D2, 
     SoldTo.D3, 
     SoldTo.D4, 
     SoldTo.Distributor
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\SALES_AREA\DATA\SOLD_TO_Sales_Area.qvd
(qvd)
 Where Exists(%KEY_SOLD_TO_SALES_AREA);

///$tab MasterPayer
BNA_MasterPayer:
Load Distinct
	 %KEY_PAYER as MASTER_PAYER,
	 Payer.Number as MasterPayerNo,
     Payer.Name as MasterPayerName,
	 Payer.Num_Name as MasterPayer,
	 Payer.City as MasterPayer.City,
	 Payer.Region as MasterPayer.Region,
	 Payer.Country as MasterPayer.Country,
	 Payer.PostalCode as MasterPyer.PostalCode
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\PAYER\data\Payer.qvd
(qvd) where exists(MASTER_PAYER,%KEY_PAYER);





//mapMasterPayerNo:
//Mapping
//LOAD Distinct 
//	 Payer as 1, 
//     num([Master Payer]) as 2
//FROM
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\BradyNA\Master Payer.xlsx]
//(ooxml, embedded labels, table is [1100-1300 Payers]);
//
//mapMasterPayerName:
//Mapping
//LOAD Distinct 
//	 Payer as 1, 
//     [Master Payer Name] as 2
//FROM
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\BradyNA\Master Payer.xlsx]
//(ooxml, embedded labels, table is [1100-1300 Payers]);
//
//mapMasterPayer:
//Mapping
//LOAD Distinct 
//	 Payer as 1, 
//     [Master Payer]&'-'&[Master Payer Name] as 2
//FROM
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\BradyNA\Master Payer.xlsx]
//(ooxml, embedded labels, table is [1100-1300 Payers]);

//BNA_MasterPayer:
//Load Distinct
//	 %KEY_PAYER,
//	 ApplyMap('mapMasterPayerNo',Payer.Number,Payer.Number) as MasterPayerNo,
//	 ApplyMap('mapMasterPayerName',Payer.Number,Payer.Name) as MasterPayerName,
//	 ApplyMap('mapMasterPayer',Payer.Number,Payer.Num_Name) as MasterPayer,
//	 Payer.City as MasterPayer.City,
//	 Payer.Region as MasterPayer.Region,
//	 Payer.Country as MasterPayer.Country,
//	 Payer.PostalCode as MasterPyer.PostalCode
//Resident Payer;
///$tab Currency
Currency:
LOAD %KEY_CURRNECY_BUDGET_CONVERSION, 
   [CurrencyConversion.AED - Budgeted Rate Next FY] 	as	[AED - Budgeted Rate Next FY] 	,
     [CurrencyConversion.AUD - Budgeted Rate Next FY] 	as	     [AUD - Budgeted Rate Next FY] 	,
//     [CurrencyConversion.BAHT - Budgeted Rate Next FY] 	as	     [BAHT - Budgeted Rate Next FY] 	,
     [CurrencyConversion.BRL - Budgeted Rate Next FY] 	as	     [BRL - Budgeted Rate Next FY] 	,
     [CurrencyConversion.CAD - Budgeted Rate Next FY] 	as	     [CAD - Budgeted Rate Next FY] 	,
     //[CurrencyConversion.CHF - Budgeted Rate Next FY] 	as	     [CHF - Budgeted Rate Next FY] 	,
     [CurrencyConversion.CNY - Budgeted Rate Next FY] 	as	     [CNY - Budgeted Rate Next FY] 	,
     [CurrencyConversion.CZK - Budgeted Rate Next FY] 	as	     [CZK - Budgeted Rate Next FY] 	,
     [CurrencyConversion.DKK - Budgeted Rate Next FY] 	as	     [DKK - Budgeted Rate Next FY] 	,
     [CurrencyConversion.EUR - Budgeted Rate Next FY] 	as	     [EUR - Budgeted Rate Next FY] 	,
     [CurrencyConversion.GBP - Budgeted Rate Next FY] 	as	     [GBP - Budgeted Rate Next FY] 	,
     [CurrencyConversion.HKD - Budgeted Rate Next FY] 	as	     [HKD - Budgeted Rate Next FY] 	,
     [CurrencyConversion.HUF - Budgeted Rate Next FY] 	as	     [HUF - Budgeted Rate Next FY] 	,
     [CurrencyConversion.INR - Budgeted Rate Next FY] 	as	     [INR - Budgeted Rate Next FY] 	,
     [CurrencyConversion.JPY - Budgeted Rate Next FY] 	as	     [JPY - Budgeted Rate Next FY] 	,
     [CurrencyConversion.KRW - Budgeted Rate Next FY] 	as	     [KRW - Budgeted Rate Next FY] 	,
     [CurrencyConversion.MXN - Budgeted Rate Next FY] 	as	     [MXN - Budgeted Rate Next FY] 	,
     [CurrencyConversion.MYR - Budgeted Rate Next FY] 	as	     [MYR - Budgeted Rate Next FY] 	,
     [CurrencyConversion.NOK - Budgeted Rate Next FY] 	as	     [NOK - Budgeted Rate Next FY] 	,
   //  [CurrencyConversion.NZD - Budgeted Rate Next FY] 	as	     [NZD - Budgeted Rate Next FY] 	,
     [CurrencyConversion.PHP - Budgeted Rate Next FY] 	as	     [PHP - Budgeted Rate Next FY] 	,
     [CurrencyConversion.PLN - Budgeted Rate Next FY] 	as	     [PLN - Budgeted Rate Next FY] 	,
     [CurrencyConversion.QAR - Budgeted Rate Next FY] 	as	     [QAR - Budgeted Rate Next FY] 	,
//     [CurrencyConversion.RGT - Budgeted Rate Next FY] 	as	     [RGT - Budgeted Rate Next FY] 	,
     [CurrencyConversion.RMB - Budgeted Rate Next FY] 	as	     [RMB - Budgeted Rate Next FY] 	,
     [CurrencyConversion.RON - Budgeted Rate Next FY] 	as	     [RON - Budgeted Rate Next FY] 	,
     [CurrencyConversion.RUB - Budgeted Rate Next FY] 	as	     [RUB - Budgeted Rate Next FY] 	,
     [CurrencyConversion.SAR - Budgeted Rate Next FY] 	as	     [SAR - Budgeted Rate Next FY] 	,
     [CurrencyConversion.SEK - Budgeted Rate Next FY] 	as	     [SEK - Budgeted Rate Next FY] 	,
     [CurrencyConversion.SGD - Budgeted Rate Next FY] 	as	     [SGD - Budgeted Rate Next FY] 	,
//     [CurrencyConversion.SKK - Budgeted Rate Next FY] 	as	     [SKK - Budgeted Rate Next FY] 	,
     [CurrencyConversion.THB - Budgeted Rate Next FY] 	as	     [THB - Budgeted Rate Next FY] 	,
     [CurrencyConversion.TRY - Budgeted Rate Next FY] 	as	     [TRY - Budgeted Rate Next FY] 	,
     [CurrencyConversion.TWD - Budgeted Rate Next FY] 	as	     [TWD - Budgeted Rate Next FY] 	,
     [CurrencyConversion.USD - Budgeted Rate Next FY] 	as	     [USD - Budgeted Rate Next FY] 	,
     [CurrencyConversion.ZAR - Budgeted Rate Next FY] 	as	     [ZAR - Budgeted Rate Next FY] 	,
     [CurrencyConversion.AED - Budgeted Rate CFY] 	as	     [AED - Budgeted Rate CFY] 	,
     [CurrencyConversion.AUD - Budgeted Rate CFY] 	as	     [AUD - Budgeted Rate CFY] 	,
 //    [CurrencyConversion.BAHT - Budgeted Rate CFY] 	as	     [BAHT - Budgeted Rate CFY] 	,
     [CurrencyConversion.BRL - Budgeted Rate CFY] 	as	     [BRL - Budgeted Rate CFY] 	,
     [CurrencyConversion.CAD - Budgeted Rate CFY] 	as	     [CAD - Budgeted Rate CFY] 	,
   //  [CurrencyConversion.CHF - Budgeted Rate CFY] 	as	     [CHF - Budgeted Rate CFY] 	,
   //  [CurrencyConversion.CNY - Budgeted Rate CFY] 	as	     [CNY - Budgeted Rate CFY] 	,
     [CurrencyConversion.CZK - Budgeted Rate CFY] 	as	     [CZK - Budgeted Rate CFY] 	,
     [CurrencyConversion.DKK - Budgeted Rate CFY] 	as	     [DKK - Budgeted Rate CFY] 	,
     [CurrencyConversion.EUR - Budgeted Rate CFY] 	as	     [EUR - Budgeted Rate CFY] 	,
     [CurrencyConversion.GBP - Budgeted Rate CFY] 	as	     [GBP - Budgeted Rate CFY] 	,
     [CurrencyConversion.HKD - Budgeted Rate CFY] 	as	     [HKD - Budgeted Rate CFY] 	,
     [CurrencyConversion.HUF - Budgeted Rate CFY] 	as	     [HUF - Budgeted Rate CFY] 	,
     [CurrencyConversion.INR - Budgeted Rate CFY] 	as	     [INR - Budgeted Rate CFY] 	,
     [CurrencyConversion.JPY - Budgeted Rate CFY] 	as	     [JPY - Budgeted Rate CFY] 	,
     [CurrencyConversion.KRW - Budgeted Rate CFY] 	as	     [KRW - Budgeted Rate CFY] 	,
     [CurrencyConversion.MXN - Budgeted Rate CFY] 	as	     [MXN - Budgeted Rate CFY] 	,
     [CurrencyConversion.MYR - Budgeted Rate CFY] 	as	     [MYR - Budgeted Rate CFY] 	,
     [CurrencyConversion.NOK - Budgeted Rate CFY] 	as	     [NOK - Budgeted Rate CFY] 	,
  //   [CurrencyConversion.NZD - Budgeted Rate CFY] 	as	     [NZD - Budgeted Rate CFY] 	,
     [CurrencyConversion.PHP - Budgeted Rate CFY] 	as	     [PHP - Budgeted Rate CFY] 	,
     [CurrencyConversion.PLN - Budgeted Rate CFY] 	as	     [PLN - Budgeted Rate CFY] 	,
     [CurrencyConversion.QAR - Budgeted Rate CFY] 	as	     [QAR - Budgeted Rate CFY] 	,
   //  [CurrencyConversion.RGT - Budgeted Rate CFY] 	as	     [RGT - Budgeted Rate CFY] 	,
     [CurrencyConversion.RMB - Budgeted Rate CFY] 	as	     [RMB - Budgeted Rate CFY] 	,
     [CurrencyConversion.RON - Budgeted Rate CFY] 	as	     [RON - Budgeted Rate CFY] 	,
     [CurrencyConversion.RUB - Budgeted Rate CFY] 	as	     [RUB - Budgeted Rate CFY] 	,
     [CurrencyConversion.SAR - Budgeted Rate CFY] 	as	     [SAR - Budgeted Rate CFY] 	,
     [CurrencyConversion.SEK - Budgeted Rate CFY] 	as	     [SEK - Budgeted Rate CFY] 	,
     [CurrencyConversion.SGD - Budgeted Rate CFY] 	as	     [SGD - Budgeted Rate CFY] 	,
   //  [CurrencyConversion.SKK - Budgeted Rate CFY] 	as	     [SKK - Budgeted Rate CFY] 	,
     [CurrencyConversion.THB - Budgeted Rate CFY] 	as	     [THB - Budgeted Rate CFY] 	,
     [CurrencyConversion.TRY - Budgeted Rate CFY] 	as	     [TRY - Budgeted Rate CFY] 	,
     [CurrencyConversion.TWD - Budgeted Rate CFY] 	as	     [TWD - Budgeted Rate CFY] 	,
     [CurrencyConversion.USD - Budgeted Rate CFY] 	as	     [USD - Budgeted Rate CFY] 	,
     [CurrencyConversion.ZAR - Budgeted Rate CFY] 	as	     [ZAR - Budgeted Rate CFY] 	,
     [CurrencyConversion.AED - Budgeted Rate PFY] 	as	     [AED - Budgeted Rate PFY] 	,
     [CurrencyConversion.AUD - Budgeted Rate PFY] 	as	     [AUD - Budgeted Rate PFY] 	,
//     [CurrencyConversion.BAHT - Budgeted Rate PFY] 	as	     [BAHT - Budgeted Rate PFY] 	,
     [CurrencyConversion.BRL - Budgeted Rate PFY] 	as	     [BRL - Budgeted Rate PFY] 	,
     [CurrencyConversion.CAD - Budgeted Rate PFY] 	as	     [CAD - Budgeted Rate PFY] 	,
   //  [CurrencyConversion.CHF - Budgeted Rate PFY] 	as	     [CHF - Budgeted Rate PFY] 	,
    // [CurrencyConversion.CNY - Budgeted Rate PFY] 	as	     [CNY - Budgeted Rate PFY] 	,
     [CurrencyConversion.CZK - Budgeted Rate PFY] 	as	     [CZK - Budgeted Rate PFY] 	,
     [CurrencyConversion.DKK - Budgeted Rate PFY] 	as	     [DKK - Budgeted Rate PFY] 	,
     [CurrencyConversion.EUR - Budgeted Rate PFY] 	as	     [EUR - Budgeted Rate PFY] 	,
     [CurrencyConversion.GBP - Budgeted Rate PFY] 	as	     [GBP - Budgeted Rate PFY] 	,
     [CurrencyConversion.HKD - Budgeted Rate PFY] 	as	     [HKD - Budgeted Rate PFY] 	,
     [CurrencyConversion.HUF - Budgeted Rate PFY] 	as	     [HUF - Budgeted Rate PFY] 	,
     [CurrencyConversion.INR - Budgeted Rate PFY] 	as	     [INR - Budgeted Rate PFY] 	,
     [CurrencyConversion.JPY - Budgeted Rate PFY] 	as	     [JPY - Budgeted Rate PFY] 	,
     [CurrencyConversion.KRW - Budgeted Rate PFY] 	as	     [KRW - Budgeted Rate PFY] 	,
     [CurrencyConversion.MXN - Budgeted Rate PFY] 	as	     [MXN - Budgeted Rate PFY] 	,
     [CurrencyConversion.MYR - Budgeted Rate PFY] 	as	     [MYR - Budgeted Rate PFY] 	,
     [CurrencyConversion.NOK - Budgeted Rate PFY] 	as	     [NOK - Budgeted Rate PFY] 	,
    // [CurrencyConversion.NZD - Budgeted Rate PFY] 	as	     [NZD - Budgeted Rate PFY] 	,
     [CurrencyConversion.PHP - Budgeted Rate PFY] 	as	     [PHP - Budgeted Rate PFY] 	,
     [CurrencyConversion.PLN - Budgeted Rate PFY] 	as	     [PLN - Budgeted Rate PFY] 	,
     [CurrencyConversion.QAR - Budgeted Rate PFY] 	as	     [QAR - Budgeted Rate PFY] 	,
//     [CurrencyConversion.RGT - Budgeted Rate PFY] 	as	     [RGT - Budgeted Rate PFY] 	,
     [CurrencyConversion.RMB - Budgeted Rate PFY] 	as	     [RMB - Budgeted Rate PFY] 	,
     [CurrencyConversion.RON - Budgeted Rate PFY] 	as	     [RON - Budgeted Rate PFY] 	,
     [CurrencyConversion.RUB - Budgeted Rate PFY] 	as	     [RUB - Budgeted Rate PFY] 	,
     [CurrencyConversion.SAR - Budgeted Rate PFY] 	as	     [SAR - Budgeted Rate PFY] 	,
     [CurrencyConversion.SEK - Budgeted Rate PFY] 	as	     [SEK - Budgeted Rate PFY] 	,
     [CurrencyConversion.SGD - Budgeted Rate PFY] 	as	     [SGD - Budgeted Rate PFY] 	,
//     [CurrencyConversion.SKK - Budgeted Rate PFY] 	as	     [SKK - Budgeted Rate PFY] 	,
     [CurrencyConversion.THB - Budgeted Rate PFY] 	as	     [THB - Budgeted Rate PFY] 	,
     [CurrencyConversion.TRY - Budgeted Rate PFY] 	as	     [TRY - Budgeted Rate PFY] 	,
     [CurrencyConversion.TWD - Budgeted Rate PFY] 	as	     [TWD - Budgeted Rate PFY] 	,
     [CurrencyConversion.USD - Budgeted Rate PFY] 	as	     [USD - Budgeted Rate PFY] 	,
     [CurrencyConversion.ZAR - Budgeted Rate PFY]	as	     [ZAR - Budgeted Rate PFY]	

FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\CURRENCY\DATA\Historical_CurrencyConversion_Budget.qvd
(qvd) Where Exists (%KEY_CURRNECY_BUDGET_CONVERSION);



Currency_Order:
LOAD * INLINE [Currency, Currency_Order, Currency_Type
CAD - Budgeted Rate Next FY, 5, CO
CAD - Budgeted Rate CFY, 6, CO
CAD - Budgeted Rate PFY, 7, CO


EUR - Budgeted Rate Next FY, 13, CO
EUR - Budgeted Rate CFY, 14, CO
EUR - Budgeted Rate PFY, 15, CO


GBP - Budgeted Rate Next FY, 17, CO
GBP - Budgeted Rate CFY, 18, CO
GBP - Budgeted Rate PFY, 19, CO


MXN - Budgeted Rate Next FY, 9, CO
MXN - Budgeted Rate CFY, 10, CO
MXN - Budgeted Rate PFY, 11, CO


USD - Budgeted Rate Next FY, 1, CO
USD - Budgeted Rate CFY, 2, CO
USD - Budgeted Rate PFY, 3, CO


AED - Budgeted Rate Next FY, 21, CO 
AED - Budgeted Rate CFY, 22, CO 
AED - Budgeted Rate PFY, 23, CO


AUD - Budgeted Rate Next FY, 25, CO
AUD - Budgeted Rate CFY, 26, CO
AUD - Budgeted Rate PFY, 27, CO


BRL - Budgeted Rate Next FY, 29, CO   
BRL - Budgeted Rate CFY, 30, CO   
BRL - Budgeted Rate PFY, 31, CO


CHF - Budgeted Rate Next FY, 33, CO 
CHF - Budgeted Rate CFY, 34, CO 
CHF - Budgeted Rate PFY, 35, CO


CNY - Budgeted Rate Next FY, 37, CO 
CNY - Budgeted Rate CFY, 38, CO 
CNY - Budgeted Rate PFY, 39, CO


CZK - Budgeted Rate Next FY, 41, CO 
CZK - Budgeted Rate CFY, 42, CO 


DKK - Budgeted Rate Next FY, 44, CO   
DKK - Budgeted Rate CFY, 45, CO  
DKK - Budgeted Rate PFY, 46, CO


HKD - Budgeted Rate Next FY, 48, CO 
HKD - Budgeted Rate CFY, 49, CO 
HKD - Budgeted Rate PFY, 50, CO


HUF - Budgeted Rate Next FY, 52, CO 
HUF - Budgeted Rate CFY, 53, CO 
HUF - Budgeted Rate PFY, 54, CO


INR - Budgeted Rate Next FY, 56, CO 
INR - Budgeted Rate CFY, 57, CO 
INR - Budgeted Rate PFY, 58, CO


JPY - Budgeted Rate Next FY, 60, CO
JPY - Budgeted Rate CFY, 61, CO
JPY - Budgeted Rate PFY, 62, CO


KRW - Budgeted Rate Next FY, 64, CO    
KRW - Budgeted Rate CFY, 65, CO   
KRW - Budgeted Rate PFY, 66, CO


MYR - Budgeted Rate Next FY, 68, CO 
MYR - Budgeted Rate CFY, 69, CO 


NOK - Budgeted Rate Next FY, 71, CO 
NOK - Budgeted Rate CFY, 72, CO 
NOK - Budgeted Rate PFY, 73, CO


NZD - Budgeted Rate Next FY, 75, CO 
NZD - Budgeted Rate CFY, 76, CO 
NZD - Budgeted Rate PFY, 77, CO


PHP - Budgeted Rate Next FY, 79, CO
PHP - Budgeted Rate CFY, 80, CO
PHP - Budgeted Rate PFY, 81, CO


PLN - Budgeted Rate Next FY, 83, CO  
PLN - Budgeted Rate CFY, 84, CO 
PLN - Budgeted Rate PFY, 85, CO


QAR - Budgeted Rate Next FY, 87, CO
QAR - Budgeted Rate CFY, 88, CO
QAR - Month End, 89, CO

RMB - Budgeted Rate Next FY, 90, CO
RMB - Budgeted Rate CFY, 91, CO
RMB - Budgeted Rate PFY, 92, CO


RON - Budgeted Rate Next FY, 94, CO 
RON - Budgeted Rate CFY, 95, CO 
RON - Budgeted Rate PFY, 96, CO


RUB - Budgeted Rate Next FY, 98, CO 
RUB - Budgeted Rate CFY, 99, CO 
RUB - Budgeted Rate PFY, 100, CO
RUB - Month End, 101, CO 

SAR - Budgeted Rate Next FY, 102, CO 
SAR - Budgeted Rate CFY, 103, CO 


SEK - Budgeted Rate Next FY, 105, CO 
SEK - Budgeted Rate CFY, 106, CO 
SEK - Budgeted Rate PFY, 107, CO


SGD - Budgeted Rate Next FY, 109, CO 
SGD - Budgeted Rate CFY, 110, CO 
SGD - Budgeted Rate PFY, 111, CO


THB - Budgeted Rate Next FY, 113, CO 
THB - Budgeted Rate CFY, 114, CO 


TRY - Budgeted Rate Next FY, 116, CO 
TRY - Budgeted Rate CFY, 117, CO 
TRY - Budgeted Rate PFY, 118, CO


TWD - Budgeted Rate Next FY, 120, CO
TWD - Budgeted Rate CFY, 121, CO
TWD - Budgeted Rate PFY, 122, CO


ZAR - Budgeted Rate Next FY, 124, CO   
ZAR - Budgeted Rate CFY, 125, CO   
ZAR - Budgeted Rate PFY, 126, CO

];

Left Join (Currency_Order)
Load 
	Currency,
	Currency_Order,
	Currency_Type,
	if(Currency_Type = 'CO','['&Currency&']','['&Currency&'_Trans]') as CurrencyField
Resident Currency_Order;
///$tab Structure
Left join (Fact)
Structure:
LOAD 
   %KEY_ENTITY,
	Entity.Top as OldEntity.Top, 
    Entity.Lvl_One as OldEntity.Lvl_One, 
    Entity.Lvl_Two as OldEntity.Lvl_Two, 
    Entity.Lvl_Three as OldEntity.Lvl_Three, 
    Entity.Lvl_Four as OldEntity.Lvl_Four, 
    Entity.Lvl_Five as OldEntity.Lvl_Five,
	Entity.GDS_1 as OldEntity.Lvl_Six,
    Entity.Acquisition //as OldEntity.Acquisition
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\ENTITY\DATA\Entity_New.qvd
(qvd)  Where Exists(%KEY_ENTITY);

Left join (Fact)
RegionalStructure:
LOAD 
   %KEY_ENTITY,
   Entity.Top,
   Entity.Lvl_One,
   Entity.Lvl_Two,
   Entity.Lvl_Three,
   Entity.Lvl_Four, 
   Entity.Lvl_Five,
   Entity.GDS_1 as Entity.Lvl_Six
   //Entity.Acquisition
FROM
[\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\ENTITY\DATA\Entity_Regional.qvd] (qvd)
Where Exists(%KEY_ENTITY);
 


///$tab DateLink
DateLink:
LOAD Distinct
	%DateID,
	'Header' as DateType,
	[Header Local Date] as %Date
Resident Fact;

Concatenate(DateLink)
LOAD Distinct
	%DateID,
	'Line' as DateType,
	%KEY_DATE as %Date
Resident Fact;
///$tab TimeLine
TimeLine:
LOAD 
//	 %KEY_DATE,
	 %KEY_DATE as %Date,
	 %KEY_DATE_CAL_TYPE, 
	 %KEY_DATE_CAL_TYPE as [Calendar Type],     
     Date, 
     TimeLine.Qtr as Qtr, 
     TimeLine.Month as Month, 
     TimeLine.Week as Week, 
     TimeLine.Year as Year, 
     TimeLine.Period as Period, 
     TimeLine.YTD as YTD, 
     TimeLine.YTD_1 as YTD_1, 
     TimeLine.YTD_2 as YTD_2, 
     TimeLine.YTD_3 as YTD_3, 
     TimeLine.YTD_4 as YTD_4, 
     TimeLine.Y as Y, 
     TimeLine.Y_1 as Y_1, 
     TimeLine.Y_2 as Y_2, 
     TimeLine.Y_3 as Y_3, 
     TimeLine.Y_4 as Y_4, 
     TimeLine.CQTD as CQTD, 
     TimeLine.PQTD as PQTD, 
     TimeLine.CQ as CQ, 
     TimeLine.PQ as PQ, 
     TimeLine.CMTD as CMTD, 
     TimeLine.PMTD as PMTD, 
     TimeLine.CLYMTD as CLYMTD, 
     TimeLine.PLYMTD as PLYMTD, 
     TimeLine.CLYQTD as CLYQTD, 
     TimeLine.PLYQTD as PLYQTD, 
     TimeLine.CM as CM, 
     TimeLine.PM as PM, 
     TimeLine.MonthName as MonthName, 
     TimeLine.DayName as DayName, 
     TimeLine.isWeekDay as isWeekDay, 
     TimeLine.isWeekEnd as isWeekEnd, 
     TimeLine.DateNo as DateNo,      
     TimeLine.MonthEndDate as MonthEndDate
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\DATE\DATA\TimeLine.qvd (qvd)
Where Exists (%Date,%KEY_DATE);

CalInfo:
Left Keep (TimeLine)
LOAD %KEY_DATE_CAL_TYPE, 
     CalType.YearStartMonth as YearStartMonth, 
     CalType.SubtractMonths as SubtractMonths, 
     CalType.PlusMonths as PlusMonths
FROM
\\etl.ebi.insidebrady.com\repository$\30.LOGICAL_LAYER\03.DIMENSIONS\DATE\DATA\CalType.qvd (qvd);

///$tab Fileloop


Security_Link:
Load Distinct 
//%KEY_FACT,
%PREREVENUE,
OldEntity.Top&'/'&OldEntity.Lvl_One&'/'&OldEntity.Lvl_Two&'/'&'<ANY>'&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Old
Resident Fact;

Concatenate 
Load Distinct
//%KEY_FACT,
%PREREVENUE,
Entity.Top&'/'&Entity.Lvl_One&'/'&Entity.Lvl_Two&'/'&
	If(Match(Entity.Lvl_One,'Americas & Asia'),If(Match(Entity.Lvl_Two,'Americas'),
		If(Match(Entity.Lvl_Three,'Health Care'),Entity.Lvl_Three,'Excl Health Care'),'<ANY>'),'<ANY>')&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
//			If(Match(Entity.Lvl_Four,'Personnel Concepts'),Entity.Lvl_Four,'<ANY>')&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
Resident Fact;

Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
'<ANY>'&'/'&'<ANY>'&'/'&'<ANY>'&'/'&'<ANY>'&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey
Resident Fact;


Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
OldEntity.Top&'/'&OldEntity.Lvl_One&'/'&'<ANY>'&'/'&'<ANY>'&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Old
Resident Fact;

Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
Entity.Top&'/'&Entity.Lvl_One&'/'&'<ANY>'&'/'&'<ANY>'&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
Resident Fact;


Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
Entity.Top&'/'&Entity.Lvl_One&'/'&Entity.Lvl_Two&'/'&'<ANY>'&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
Resident Fact;


Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
Entity.Top&'/'&Entity.Lvl_One&'/'&Entity.Lvl_Two&'/'&Entity.Lvl_Three&'/'&'<ANY>'&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
Resident Fact;


Concatenate
Load Distinct
//%KEY_FACT,
%PREREVENUE,
Entity.Top&'/'&Entity.Lvl_One&'/'&Entity.Lvl_Two&'/'&Entity.Lvl_Three&'/'&Entity.Lvl_Four&'/'&%KEY_DATA_SET as %FileLoopKey //Regional
Resident Fact;

FileOutput:
LOAD Distinct FileName, 
if(len(Trim(Top))=0,'<ANY>',Top)&'/'&if(len(Trim(Level1))=0,'<ANY>',Level1)&'/'&if(len(Trim(Level2))=0,'<ANY>',Level2)&'/'&if(len(Trim(Level3))=0,'<ANY>',Level3)&'/'&if(len(Trim(Level4))=0,'<ANY>',Level4)&'/'&DataSet as %FileLoopKey
FROM
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\App_Config\Prerevenue_FileLoop.xlsx]
Prerevenue_FileLoop.xlsx
(ooxml, embedded labels, table is Data)
where len(Trim(FileName))<> 0;


Concatenate
LOAD Distinct FileName, 
if(Trim(len(Top))=0,'<ANY>',Top)&'/'&if(Trim(len(Level1))=0,'<ANY>',Level1)&'/'&if(Trim(len(Level2))=0,'<ANY>',Level2)&'/'&if(len(Trim(Level3))=0,'<ANY>',Level3)&'/'&if(len(Trim(Level4))=0,'<ANY>',Level4)&'/'&'REG' as %FileLoopKey
FROM
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\App_Config\Prerevenue_FileLoop.xlsx]
Prerevenue_FileLoop.xlsx
(ooxml, embedded labels, table is Data)
where len(Trim(FileName))<> 0;

FileOutput_Security:
Left Keep(FileOutput)
LOAD FileName, 
     Trim(subfield(Trim(ActiveDirectoryGroup),',')) as File_ActiveDirectoryGroup
From
//[\\etl.ebi.insidebrady.com\repository$\15.GOOGLE\RAW\Standards\App_Config\Prerevenue_FileLoop.xlsx]
Prerevenue_FileLoop.xlsx
(ooxml, embedded labels, table is Data);

Concatenate(FileOutput_Security)
LOAD Distinct
	 FileName, 
     'U_BI Administrators' as File_ActiveDirectoryGroup
Resident FileOutput_Security;

Concatenate(FileOutput_Security)
LOAD Distinct
	 FileName, 
     'U_BI Superuser' as File_ActiveDirectoryGroup
Resident FileOutput_Security;


Concatenate(FileOutput_Security)
LOAD Distinct
	 FileName, 
     'U_BI QV_DA' as File_ActiveDirectoryGroup
Resident FileOutput_Security;

Concatenate(FileOutput_Security)
LOAD Distinct
	 FileName, 
     'U_BI QV Developers' as File_ActiveDirectoryGroup
Resident FileOutput_Security;

///$Rename

Map_old_Rename:
Mapping
LOAD dim_Name,
dim_Name&'_OLD_NAME' 
FROM
[G:\06.Applications-Source\PreRevenue\AdHoc-PreRevenue.xlsx]
(ooxml, embedded labels, table is DIM)
where purgechar(FieldName,'[]')<> dim_Name ;

Map_Rename:
Mapping
LOAD purgechar(FieldName,'[]') as OldName,
     dim_Name as NewName
FROM
[G:\06.Applications-Source\PreRevenue\AdHoc-PreRevenue.xlsx]
(ooxml, embedded labels, table is DIM);

Map_Rename:
Mapping
LOAD OldName,
     NewName 
FROM
[G:\06.Applications-Source\PreRevenue\AdHoc-PreRevenue.xlsx]
(ooxml, embedded labels, table is RenameFields);

RENAME Fields using Map_old_Rename;
RENAME Fields using Map_Rename;


///$tab Exit

Exit Script ;
